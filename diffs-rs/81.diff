diff --git a/src/lexer.rs b/src/lexer.rs
index 48d9e05..34df290 100644
--- a/src/lexer.rs
+++ b/src/lexer.rs
@@ -1,4 +1,4 @@
-use std::{collections::HashSet};
+use std::collections::HashSet;
 
 use crate::context::{Context, AsciiStr};
 
@@ -179,6 +179,37 @@ impl<'a> Lexer<'a> {
                 kind: TokenKind::Str(str),
             };
         }
+        else if c == b'\'' {
+            self.advance();
+
+            if self.peek() == 0 {
+                self.ctx.error_at(&loc, "unclosed charater literal");
+            }
+
+            let v = if self.peek() == b'\\' {
+                let escape_loc = self.loc(); // wastefull...
+                self.advance();
+                let (v, len) = self.read_escaped_char(self.rest(), &escape_loc);
+                self.nadvance(len);
+                v
+            }
+            else {
+                let v = self.peek();
+                self.advance();
+                v
+            } as i8;
+
+            if self.peek() != b'\'' {
+                self.ctx.error_at(&loc, "unclosed charater literal");
+            }
+            self.advance();
+
+            return Token {
+                loc,
+                length: self.len(&loc),
+                kind: TokenKind::Num(v.into())
+            }
+        }
         else {
             let punct_len = read_punct(self.rest());
             if punct_len > 0 {
diff --git a/test/literal.c b/test/literal.c
new file mode 100644
index 0000000..fd3ccf9
--- /dev/null
+++ b/test/literal.c
@@ -0,0 +1,10 @@
+#include "test.h"
+
+int main() {
+  ASSERT(97, 'a');
+  ASSERT(10, '\n');
+  ASSERT(-128, '\x80');
+
+  printf("OK\n");
+  return 0;
+}
