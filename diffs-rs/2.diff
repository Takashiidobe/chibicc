diff --git a/src/main.rs b/src/main.rs
index bddf190..8e4ad80 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -1,99 +1,117 @@
 use std::env;
 
 #[derive(Debug)]
-enum TokenKind {
+pub enum TokenKind {
     Punct,
     Num { val: i32 },
     Eof
 }
 
 #[derive(Debug)]
-struct Token {
+pub struct Token {
     offset: usize,
     length: usize,
     kind: TokenKind
 }
 
-fn equal(tk: &Token, s: &str, src: &str) -> bool {
-    src[tk.offset..(tk.offset + tk.length)].eq(s)
+pub struct Compiler {
+    current_input: Vec<u8>,
 }
 
-fn get_number(tk: &Token) -> i32 {
-    match tk.kind {
-        TokenKind::Num { val } => val,
-        _ => panic!("expected a number, found {:?}", tk)
+impl Compiler {
+    pub fn new(src: &str) -> Self {
+        Self {
+            current_input: src.as_bytes().to_vec()
+        }
     }
-}
 
-fn tokenize(src: &str) -> Vec<Token> {
-    let mut tks = Vec::new();
-    let mut offset = 0;
-    // TODO: figure out a way to sanely work with unicode cps
-    // while keeping track of byte offsets...
-    let buf = src.as_bytes();
+    pub fn compile(&self) {
+        let toks = self.tokenize();
+        let mut toki = toks.iter();
 
-    while offset < buf.len() {
-        let c = buf[offset];
-
-        if c.is_ascii_whitespace() {
-            offset += 1;
-        }
-        else if c.is_ascii_digit() {
-            let (val, count) = read_int(buf, offset);
-            if count == 0 {
-                panic!("Failed to read integer at: {}...", String::from_utf8_lossy(&buf[offset..(offset + 10)]))
+        println!("  .globl main");
+        println!("main:");
+        println!("  mov ${}, %rax", self.get_number(toki.next().unwrap()));
+    
+        while let Some(tok) = toki.next() {
+            if self.equal(tok, "+") {
+                println!("  add ${}, %rax", self.get_number(toki.next().unwrap()));
+            }
+            else if self.equal(tok, "-") {
+                println!("  sub ${}, %rax", self.get_number(toki.next().unwrap()));
+            }
+            else {
+                match tok.kind {
+                    TokenKind::Eof => break,
+                    _ => self.error_tok(tok, "unexpected token")
+                };
             }
-            tks.push(Token {
-                offset,
-                length: count,
-                kind: TokenKind::Num { val },
-            });
-            offset += count;
-        }
-        else if c == b'+' || c == b'-' {
-            tks.push(Token {
-                offset,
-                length: 1,
-                kind: TokenKind::Punct,
-            });
-            offset += 1;
         }
+    
+        println!("  ret");
     }
 
-    tks.push(Token { offset, length: 0, kind: TokenKind::Eof });
-    tks
-}
-
-fn main() {
-    let args: Vec<String> = env::args().collect();
-    if args.len() != 2 {
-        panic!("{}: invalid number of arguments", args[0]);
+    fn tokenize(&self) -> Vec<Token> {
+        let mut toks = Vec::new();
+        let mut offset = 0;
+        let buf = &self.current_input;
+    
+        while offset < buf.len() {
+            let c = buf[offset];
+    
+            if c.is_ascii_whitespace() {
+                offset += 1;
+            }
+            else if c.is_ascii_digit() {
+                let (val, count) = read_int(buf, offset);
+                if count == 0 {
+                    self.error_at(offset, "expected number")
+                }
+                toks.push(Token {
+                    offset,
+                    length: count,
+                    kind: TokenKind::Num { val },
+                });
+                offset += count;
+            }
+            else if c == b'+' || c == b'-' {
+                toks.push(Token {
+                    offset,
+                    length: 1,
+                    kind: TokenKind::Punct,
+                });
+                offset += 1;
+            }
+            else {
+                self.error_at(offset, "invalid token")
+            }
+        }
+    
+        toks.push(Token { offset, length: 0, kind: TokenKind::Eof });
+        toks
+    }
+    
+    fn equal(&self, tok: &Token, s: &str) -> bool {
+        self.current_input[tok.offset..(tok.offset + tok.length)].eq(s.as_bytes())
     }
 
-    let src = &args[1];
-    let tks = tokenize(src);
-    let mut tki = tks.iter();
-
-    println!("  .globl main");
-    println!("main:");
-    println!("  mov ${}, %rax", get_number(tki.next().unwrap()));
-
-    while let Some(tk) = tki.next() {
-        if equal(tk, "+", src) {
-            println!("  add ${}, %rax", get_number(tki.next().unwrap()));
-        }
-        else if equal(tk, "-", src) {
-            println!("  sub ${}, %rax", get_number(tki.next().unwrap()));
-        }
-        else {
-            match tk.kind {
-                TokenKind::Eof => break,
-                _ => panic!("unexpected token {:?}", tk)
-            };
+    fn get_number(&self, tok: &Token) -> i32 {
+        match tok.kind {
+            TokenKind::Num { val } => val,
+            _ => self.error_tok(tok, "expected a number")
         }
     }
 
-    println!("  ret");
+    fn error_at(&self, offset: usize, msg: &str) -> ! {
+        eprintln!("{}", String::from_utf8_lossy(&self.current_input));
+        eprint!("{: <1$}", "", offset);
+        eprintln!("^ {}", msg);
+        panic!();
+    }
+    
+    fn error_tok(&self, tok: &Token, msg: &str) -> ! {
+        self.error_at(tok.offset, msg);
+    }
 }
 
 fn read_int(buf: &[u8], start_offset: usize) -> (i32, usize) {
@@ -111,3 +129,13 @@ fn read_int(buf: &[u8], start_offset: usize) -> (i32, usize) {
     }
     return (acc, offset - start_offset);
 }
+
+fn main() {
+    let args: Vec<String> = env::args().collect();
+    if args.len() != 2 {
+        panic!("{}: invalid number of arguments", args[0]);
+    }
+
+    let compiler = Compiler::new(&args[1]);
+    compiler.compile();
+}
\ No newline at end of file
diff --git a/test.sh b/test.sh
index 3b7e5f4..d7c45d1 100755
--- a/test.sh
+++ b/test.sh
@@ -5,7 +5,7 @@ assert() {
 
   ./target/debug/chibicc "$input" > tmp.s || exit
   gcc -static -o tmp tmp.s -z execstack
-  RUST_BACKTRACE=1 ./tmp
+  ./tmp
   actual="$?"
 
   if [ "$actual" = "$expected" ]; then
@@ -16,7 +16,9 @@ assert() {
   fi
 }
 
-cargo build
+cargo build || exit
+
+export RUST_BACKTRACE=1
 
 assert 0 0
 assert 42 42
