diff --git a/src/codegen.rs b/src/codegen.rs
new file mode 100644
index 0000000..f9627d2
--- /dev/null
+++ b/src/codegen.rs
@@ -0,0 +1,118 @@
+use crate::errors::ErrorReporting;
+use crate::parser::{Node, NodeKind};
+
+pub struct Codegen<'a> {
+  src: &'a [u8],
+  depth: i64,
+}
+
+impl<'a> ErrorReporting for Codegen<'a> {
+  fn src(&self) -> &[u8] { self.src }
+}
+
+impl<'a> Codegen<'a> {
+  pub fn new(src: &'a [u8]) -> Self {
+      Self {
+          src,
+          depth: 0
+      }
+  }
+
+  pub fn program(&mut self, node: &Node) {
+      println!("  .globl main");
+      println!("main:");
+      self.expr(node);
+      println!("  ret");
+  }
+
+  fn push(&mut self) {
+      println!("  push %rax");
+      self.depth += 1;
+  }
+
+  fn pop(&mut self, arg: &str) {
+      println!("  pop {}", arg);
+      self.depth -= 1;
+  }
+
+  fn expr(&mut self, node: &Node) {
+      match node.kind {
+          NodeKind::Num { val } => println!("  mov ${}, %rax", val),
+          NodeKind::Neg { ref expr } => {
+              self.expr(expr);
+              println!("  neg %rax");
+          }
+          NodeKind::Add { ref lhs, ref rhs } => {
+              self.expr(rhs.as_ref());
+              self.push();
+              self.expr(lhs.as_ref());
+              self.pop("%rdi");
+              println!("  add %rdi, %rax");
+          },
+          NodeKind::Sub { ref lhs, ref rhs } => {
+              self.expr(rhs.as_ref());
+              self.push();
+              self.expr(lhs.as_ref());
+              self.pop("%rdi");
+              println!("  sub %rdi, %rax");
+          },
+          NodeKind::Mul { ref lhs, ref rhs } => {
+              self.expr(rhs.as_ref());
+              self.push();
+              self.expr(lhs.as_ref());
+              self.pop("%rdi");
+              println!("  imul %rdi, %rax");
+          },
+          NodeKind::Div { ref lhs, ref rhs } => {
+              self.expr(rhs.as_ref());
+              self.push();
+              self.expr(lhs.as_ref());
+              self.pop("%rdi");
+              println!("  cqo");
+              println!("  idiv %rdi, %rax");
+          },
+          NodeKind::Eq { ref lhs, ref rhs } => {
+              self.expr(rhs.as_ref());
+              self.push();
+              self.expr(lhs.as_ref());
+              self.pop("%rdi");
+              println!("  cmp %rdi, %rax");
+              println!("  sete %al");
+              println!("  movzb %al, %rax");
+          },
+          NodeKind::Ne { ref lhs, ref rhs } => {
+              self.expr(rhs.as_ref());
+              self.push();
+              self.expr(lhs.as_ref());
+              self.pop("%rdi");
+              println!("  cmp %rdi, %rax");
+              println!("  setne %al");
+              println!("  movzb %al, %rax");
+          },
+          NodeKind::Le { ref lhs, ref rhs } => {
+              self.expr(rhs.as_ref());
+              self.push();
+              self.expr(lhs.as_ref());
+              self.pop("%rdi");
+              println!("  cmp %rdi, %rax");
+              println!("  setle %al");
+              println!("  movzb %al, %rax");
+          },
+          NodeKind::Lt { ref lhs, ref rhs } => {
+              self.expr(rhs.as_ref());
+              self.push();
+              self.expr(lhs.as_ref());
+              self.pop("%rdi");
+              println!("  cmp %rdi, %rax");
+              println!("  setl %al");
+              println!("  movzb %al, %rax");
+          },
+      };
+  }
+
+  pub fn sanity_checks(&self) {
+    if self.depth != 0 {
+      panic!("depth is not 0");
+    }
+  }
+}
diff --git a/src/errors.rs b/src/errors.rs
new file mode 100644
index 0000000..c1f13dc
--- /dev/null
+++ b/src/errors.rs
@@ -0,0 +1,16 @@
+use crate::lexer::Token;
+
+pub trait ErrorReporting {
+  fn src(&self) -> &[u8];
+
+  fn error_at(&self, offset: usize, msg: &str) -> ! {
+      eprintln!("{}", String::from_utf8_lossy(&self.src()));
+      eprint!("{: <1$}", "", offset);
+      eprintln!("^ {}", msg);
+      panic!();
+  }
+  
+  fn error_tok(&self, tok: &Token, msg: &str) -> ! {
+      self.error_at(tok.offset, msg);
+  }
+}
diff --git a/src/lexer.rs b/src/lexer.rs
new file mode 100644
index 0000000..67aaaf4
--- /dev/null
+++ b/src/lexer.rs
@@ -0,0 +1,110 @@
+use crate::errors::ErrorReporting;
+
+#[derive(Debug)]
+pub enum TokenKind {
+    Punct,
+    Num { val: i32 },
+    Eof
+}
+
+#[derive(Debug)]
+pub struct Token {
+    pub offset: usize,
+    pub length: usize,
+    pub kind: TokenKind
+}
+
+pub struct Lexer<'a> {
+  src: &'a [u8],
+}
+
+impl<'a> ErrorReporting for Lexer<'a> {
+  fn src(&self) -> &[u8] { self.src }
+}
+
+impl<'a> Lexer<'a> {
+  pub fn new(src: &'a [u8]) -> Self {
+      Self { src }
+  }
+
+  pub fn tokenize(&self) -> Vec<Token> {
+      let mut toks = Vec::new();
+      let mut offset = 0;
+      let src = self.src;
+  
+      while offset < src.len() {
+          let c = src[offset];
+  
+          if c.is_ascii_whitespace() {
+              offset += 1;
+          }
+          else if c.is_ascii_digit() {
+              let (val, count) = read_int(&src[offset..]);
+              if count == 0 {
+                  self.error_at(offset, "expected number")
+              }
+              toks.push(Token {
+                  offset,
+                  length: count,
+                  kind: TokenKind::Num { val },
+              });
+              offset += count;
+          }
+          else {
+              let punct_len = read_punct(&src[offset..]);
+              if punct_len > 0 {
+                  toks.push(Token {
+                      offset,
+                      length: punct_len,
+                      kind: TokenKind::Punct,
+                  });
+                  offset += punct_len;
+              }
+              else {
+                  self.error_at(offset, "invalid token");
+              }
+          }
+      }
+  
+      toks.push(Token { offset, length: 0, kind: TokenKind::Eof });
+      toks
+  }
+}
+
+fn read_int(buf: &[u8]) -> (i32, usize) {
+  let mut acc: i32 = 0;
+  let mut offset = 0;
+  while offset < buf.len() {
+      let b = buf[offset];
+      if b.is_ascii_digit() {
+          offset += 1;
+          acc = acc * 10 + i32::from(b - b'0');
+      }
+      else {
+          break;
+      }
+  }
+  return (acc, offset);
+}
+
+fn ispunct(c: u8) -> bool {
+  return c == b'+' || c == b'-' || c == b'*' || c == b'/' || 
+      c == b'(' || c == b')' || c == b'<' || c == b'>';
+}
+
+fn starts_with(src: &[u8], s: &str) -> bool {
+  return src.starts_with(s.as_bytes());
+}
+
+fn read_punct(src: &[u8]) -> usize {
+  if starts_with(src, "==") || starts_with(src, "!=")
+     || starts_with(src, "<=") || starts_with(src, ">=") {
+      2
+  }
+  else if ispunct(src[0]) {
+      1
+  }
+  else {
+      0
+  }
+}
\ No newline at end of file
diff --git a/src/main.rs b/src/main.rs
index 13f279c..06e4f81 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -1,493 +1,11 @@
 use std::env;
 
-#[derive(Debug)]
-pub enum TokenKind {
-    Punct,
-    Num { val: i32 },
-    Eof
-}
+use crate::{lexer::Lexer, parser::Parser, codegen::Codegen};
 
-#[derive(Debug)]
-pub struct Token {
-    offset: usize,
-    length: usize,
-    kind: TokenKind
-}
-
-type P<A> = Box<A>;
-
-pub enum NodeKind {
-    Num { val: i32 },
-
-    Add { lhs: P<Node>, rhs: P<Node> },
-    Sub { lhs: P<Node>, rhs: P<Node> },
-    Mul { lhs: P<Node>, rhs: P<Node> },
-    Div { lhs: P<Node>, rhs: P<Node> },
-    Neg { exp: P<Node> },
-
-    Eq { lhs: P<Node>, rhs: P<Node> },
-    Ne { lhs: P<Node>, rhs: P<Node> },
-    Lt { lhs: P<Node>, rhs: P<Node> },
-    Le { lhs: P<Node>, rhs: P<Node> },
-}
-
-pub struct Node {
-    kind: NodeKind
-}
-
-trait ErrorReporting {
-    fn src(&self) -> &[u8];
-
-    fn error_at(&self, offset: usize, msg: &str) -> ! {
-        eprintln!("{}", String::from_utf8_lossy(&self.src()));
-        eprint!("{: <1$}", "", offset);
-        eprintln!("^ {}", msg);
-        panic!();
-    }
-    
-    fn error_tok(&self, tok: &Token, msg: &str) -> ! {
-        self.error_at(tok.offset, msg);
-    }
-}
-
-pub struct Lexer<'a> {
-    src: &'a [u8],
-}
-
-impl<'a> ErrorReporting for Lexer<'a> {
-    fn src(&self) -> &[u8] { self.src }
-}
-
-impl<'a> Lexer<'a> {
-    pub fn new(src: &'a [u8]) -> Self {
-        Self {
-            src
-        }
-    }
-
-    fn tokenize(&self) -> Vec<Token> {
-        let mut toks = Vec::new();
-        let mut offset = 0;
-        let src = self.src;
-    
-        while offset < src.len() {
-            let c = src[offset];
-    
-            if c.is_ascii_whitespace() {
-                offset += 1;
-            }
-            else if c.is_ascii_digit() {
-                let (val, count) = read_int(&src[offset..]);
-                if count == 0 {
-                    self.error_at(offset, "expected number")
-                }
-                toks.push(Token {
-                    offset,
-                    length: count,
-                    kind: TokenKind::Num { val },
-                });
-                offset += count;
-            }
-            else {
-                let punct_len = read_punct(&src[offset..]);
-                if punct_len > 0 {
-                    toks.push(Token {
-                        offset,
-                        length: punct_len,
-                        kind: TokenKind::Punct,
-                    });
-                    offset += punct_len;
-                }
-                else {
-                    self.error_at(offset, "invalid token");
-                }
-            }
-        }
-    
-        toks.push(Token { offset, length: 0, kind: TokenKind::Eof });
-        toks
-    }
-}
-
-fn read_int(buf: &[u8]) -> (i32, usize) {
-    let mut acc: i32 = 0;
-    let mut offset = 0;
-    while offset < buf.len() {
-        let b = buf[offset];
-        if b.is_ascii_digit() {
-            offset += 1;
-            acc = acc * 10 + i32::from(b - b'0');
-        }
-        else {
-            break;
-        }
-    }
-    return (acc, offset);
-}
-
-fn ispunct(c: u8) -> bool {
-    return c == b'+' || c == b'-' || c == b'*' || c == b'/' || 
-        c == b'(' || c == b')' || c == b'<' || c == b'>';
-}
-
-fn starts_with(src: &[u8], s: &str) -> bool {
-    return src.starts_with(s.as_bytes());
-}
-
-fn read_punct(src: &[u8]) -> usize {
-    if starts_with(src, "==") || starts_with(src, "!=")
-       || starts_with(src, "<=") || starts_with(src, ">=") {
-        2
-    }
-    else if ispunct(src[0]) {
-        1
-    }
-    else {
-        0
-    }
-}
-
-pub struct Parser<'a> {
-    src: &'a [u8],
-    toks: &'a [Token],
-    tok_index: usize
-}
-
-impl<'a> ErrorReporting for Parser<'a> {
-    fn src(&self) -> &[u8] { self.src }
-}
-
-impl<'a> Parser<'a> {
-    fn new(src: &'a [u8], toks: &'a [Token]) -> Self {
-        if toks.is_empty() {
-            panic!("Empty token array")
-        }
-        Self {
-            src,
-            toks,
-            tok_index: 0,
-        }
-    }
-    
-    // expr = equality
-    fn expr(&mut self) -> Node {
-        self.equality()
-    }
-
-    // equality = relational ("==" relational | "!=" relational)*
-    fn equality(&mut self) -> Node {
-        let mut node = self.relational();
-        
-        loop {
-            if self.tok_is("==") {
-                self.advance();
-                node = Node {
-                    kind: NodeKind::Eq { 
-                        lhs: P::new(node), 
-                        rhs: P::new(self.relational()) 
-                    }
-                };
-            }
-            else if self.tok_is("!=") {
-                self.advance();
-                node = Node {
-                    kind: NodeKind::Ne { 
-                        lhs: P::new(node), 
-                        rhs: P::new(self.relational()) 
-                    }
-                };
-            }
-            else {
-                break;
-            }
-        }
-
-        node
-    }
-
-    // relational = add ("<" add | "<=" add | ">" add | ">=" add)*
-    fn relational(&mut self) -> Node {
-        let mut node = self.add();
-        
-        loop {
-            if self.tok_is("<") {
-                self.advance();
-                node = Node {
-                    kind: NodeKind::Lt { 
-                        lhs: P::new(node), 
-                        rhs: P::new(self.add()) 
-                    }
-                };
-            }
-            else if self.tok_is("<=") {
-                self.advance();
-                node = Node {
-                    kind: NodeKind::Le { 
-                        lhs: P::new(node), 
-                        rhs: P::new(self.add()) 
-                    }
-                };
-            }
-            else if self.tok_is(">") {
-                self.advance();
-                node = Node {
-                    kind: NodeKind::Lt { 
-                        lhs: P::new(self.add()),
-                        rhs: P::new(node)
-                    }
-                };
-            }
-            else if self.tok_is(">=") {
-                self.advance();
-                node = Node {
-                    kind: NodeKind::Le { 
-                        lhs: P::new(self.add()),
-                        rhs: P::new(node)
-                    }
-                };
-            }
-            else {
-                break;
-            }
-        }
-
-        node
-    }
-
-    // add = mul ("+" mul | "-" mul)*
-    fn add(&mut self) -> Node {
-        let mut node = self.mul();
-        
-        loop {
-            if self.tok_is("+") {
-                self.advance();
-                node = Node {
-                    kind: NodeKind::Add { 
-                        lhs: P::new(node), 
-                        rhs: P::new(self.mul()) 
-                    }
-                };
-            }
-            else if self.tok_is("-") {
-                self.advance();
-                node = Node {
-                    kind: NodeKind::Sub { 
-                        lhs: P::new(node), 
-                        rhs: P::new(self.mul()) 
-                    }
-                };
-            }
-            else {
-                break;
-            }
-        }
-
-        node
-    }
-
-    // mul = unary ("*" unary | "/" unary)*
-    fn mul(&mut self) -> Node {
-        let mut node = self.unary();
-        
-        loop {
-            if self.tok_is("*") {
-                self.advance();
-                node = Node {
-                    kind: NodeKind::Mul { 
-                        lhs: P::new(node), 
-                        rhs: P::new(self.unary()) 
-                    }
-                };
-            }
-            else if self.tok_is("/") {
-                self.advance();
-                node = Node {
-                    kind: NodeKind::Div { 
-                        lhs: P::new(node), 
-                        rhs: P::new(self.unary()) 
-                    }
-                };
-            }
-            else {
-                break;
-            }
-        }
-
-        node
-    }
-
-    // unary = ("+" | "-") unary
-    //       | primary
-    fn unary(&mut self) -> Node {
-        if self.tok_is("+") {
-            self.advance();
-            return self.unary()
-        }
-        
-        if self.tok_is("-") {
-            self.advance();
-            return Node { kind: NodeKind::Neg { exp: P::new(self.unary()) }}
-        }
-
-        self.primary()
-    }
-
-    // primary = "(" expr ")" | num
-    fn primary(&mut self) -> Node {
-        match self.peek().kind {
-            TokenKind::Num { val } => {
-                self.advance();
-                return Node { kind: NodeKind::Num { val } }
-            }
-            TokenKind::Punct => 
-                if self.tok_is("(") {
-                    self.advance();
-                    let node = self.expr();
-                    self.skip(")");
-                    return node
-                },
-            _ => {}
-        };
-        self.error_tok(self.peek(), "expected an expression");
-    }
-
-    fn peek(&self) -> &Token { &self.toks[self.tok_index] }
-    fn advance(&mut self) {
-        if self.tok_index >= self.toks.len() {
-            panic!("Unexpected end of file");
-        }
-        self.tok_index += 1;
-    }
-
-    fn tok_is(&self, s: &str) -> bool {
-        let tok = self.peek();
-        self.src[tok.offset..(tok.offset + tok.length)].eq(s.as_bytes())
-    }
-
-    fn skip(&mut self, s: &str) {
-        if !self.tok_is(s) {
-            self.error_tok(self.peek(), &format!("Expected {}", s));
-        }
-        self.advance();
-    }
-
-    fn ensure_done(&self) {
-        match self.peek().kind {
-            TokenKind::Eof => {},
-            _ => self.error_tok(self.peek(), "extra token")
-        }
-    }
-}
-
-pub struct Codegen<'a> {
-    src: &'a [u8],
-    depth: i64,
-}
-
-impl<'a> ErrorReporting for Codegen<'a> {
-    fn src(&self) -> &[u8] { self.src }
-}
-
-impl<'a> Codegen<'a> {
-    fn new(src: &'a [u8]) -> Self {
-        Self {
-            src,
-            depth: 0
-        }
-    }
-
-    fn program(&mut self, node: &Node) {
-        println!("  .globl main");
-        println!("main:");
-        self.expr(node);
-        println!("  ret");
-    }
-
-    fn push(&mut self) {
-        println!("  push %rax");
-        self.depth += 1;
-    }
-
-    fn pop(&mut self, arg: &str) {
-        println!("  pop {}", arg);
-        self.depth -= 1;
-    }
-
-    fn expr(&mut self, node: &Node) {
-        match node.kind {
-            NodeKind::Num { val } => println!("  mov ${}, %rax", val),
-            NodeKind::Neg { exp: ref expr } => {
-                self.expr(expr);
-                println!("  neg %rax");
-            }
-            NodeKind::Add { ref lhs, ref rhs } => {
-                self.expr(rhs.as_ref());
-                self.push();
-                self.expr(lhs.as_ref());
-                self.pop("%rdi");
-                println!("  add %rdi, %rax");
-            },
-            NodeKind::Sub { ref lhs, ref rhs } => {
-                self.expr(rhs.as_ref());
-                self.push();
-                self.expr(lhs.as_ref());
-                self.pop("%rdi");
-                println!("  sub %rdi, %rax");
-            },
-            NodeKind::Mul { ref lhs, ref rhs } => {
-                self.expr(rhs.as_ref());
-                self.push();
-                self.expr(lhs.as_ref());
-                self.pop("%rdi");
-                println!("  imul %rdi, %rax");
-            },
-            NodeKind::Div { ref lhs, ref rhs } => {
-                self.expr(rhs.as_ref());
-                self.push();
-                self.expr(lhs.as_ref());
-                self.pop("%rdi");
-                println!("  cqo");
-                println!("  idiv %rdi, %rax");
-            },
-            NodeKind::Eq { ref lhs, ref rhs } => {
-                self.expr(rhs.as_ref());
-                self.push();
-                self.expr(lhs.as_ref());
-                self.pop("%rdi");
-                println!("  cmp %rdi, %rax");
-                println!("  sete %al");
-                println!("  movzb %al, %rax");
-            },
-            NodeKind::Ne { ref lhs, ref rhs } => {
-                self.expr(rhs.as_ref());
-                self.push();
-                self.expr(lhs.as_ref());
-                self.pop("%rdi");
-                println!("  cmp %rdi, %rax");
-                println!("  setne %al");
-                println!("  movzb %al, %rax");
-            },
-            NodeKind::Le { ref lhs, ref rhs } => {
-                self.expr(rhs.as_ref());
-                self.push();
-                self.expr(lhs.as_ref());
-                self.pop("%rdi");
-                println!("  cmp %rdi, %rax");
-                println!("  setle %al");
-                println!("  movzb %al, %rax");
-            },
-            NodeKind::Lt { ref lhs, ref rhs } => {
-                self.expr(rhs.as_ref());
-                self.push();
-                self.expr(lhs.as_ref());
-                self.pop("%rdi");
-                println!("  cmp %rdi, %rax");
-                println!("  setl %al");
-                println!("  movzb %al, %rax");
-            },
-        };
-    }
-}
+pub mod errors;
+pub mod lexer;
+pub mod parser;
+pub mod codegen;
 
 fn main() {
     let args: Vec<String> = env::args().collect();
@@ -508,6 +26,5 @@ fn main() {
 
     let mut codegen = Codegen::new(src);
     codegen.program(&node);
-    
-    assert!(codegen.depth == 0);
+    codegen.sanity_checks();
 }
\ No newline at end of file
diff --git a/src/parser.rs b/src/parser.rs
new file mode 100644
index 0000000..1036677
--- /dev/null
+++ b/src/parser.rs
@@ -0,0 +1,255 @@
+use crate::lexer::{Token, TokenKind};
+use crate::errors::ErrorReporting;
+
+pub type P<A> = Box<A>;
+
+pub enum NodeKind {
+    Num { val: i32 },
+
+    Add { lhs: P<Node>, rhs: P<Node> },
+    Sub { lhs: P<Node>, rhs: P<Node> },
+    Mul { lhs: P<Node>, rhs: P<Node> },
+    Div { lhs: P<Node>, rhs: P<Node> },
+    Neg { expr: P<Node> },
+
+    Eq { lhs: P<Node>, rhs: P<Node> },
+    Ne { lhs: P<Node>, rhs: P<Node> },
+    Lt { lhs: P<Node>, rhs: P<Node> },
+    Le { lhs: P<Node>, rhs: P<Node> },
+}
+
+pub struct Node {
+    pub kind: NodeKind
+}
+
+pub struct Parser<'a> {
+    src: &'a [u8],
+    toks: &'a [Token],
+    tok_index: usize
+}
+
+impl<'a> ErrorReporting for Parser<'a> {
+    fn src(&self) -> &[u8] { self.src }
+}
+
+impl<'a> Parser<'a> {
+    pub fn new(src: &'a [u8], toks: &'a [Token]) -> Self {
+        if toks.is_empty() {
+            panic!("Empty token array")
+        }
+        Self {
+            src,
+            toks,
+            tok_index: 0,
+        }
+    }
+    
+    // expr = equality
+    pub fn expr(&mut self) -> Node {
+        self.equality()
+    }
+
+    // equality = relational ("==" relational | "!=" relational)*
+    fn equality(&mut self) -> Node {
+        let mut node = self.relational();
+        
+        loop {
+            if self.tok_is("==") {
+                self.advance();
+                node = Node {
+                    kind: NodeKind::Eq { 
+                        lhs: P::new(node), 
+                        rhs: P::new(self.relational()) 
+                    }
+                };
+            }
+            else if self.tok_is("!=") {
+                self.advance();
+                node = Node {
+                    kind: NodeKind::Ne { 
+                        lhs: P::new(node), 
+                        rhs: P::new(self.relational()) 
+                    }
+                };
+            }
+            else {
+                break;
+            }
+        }
+
+        node
+    }
+
+    // relational = add ("<" add | "<=" add | ">" add | ">=" add)*
+    fn relational(&mut self) -> Node {
+        let mut node = self.add();
+        
+        loop {
+            if self.tok_is("<") {
+                self.advance();
+                node = Node {
+                    kind: NodeKind::Lt { 
+                        lhs: P::new(node), 
+                        rhs: P::new(self.add()) 
+                    }
+                };
+            }
+            else if self.tok_is("<=") {
+                self.advance();
+                node = Node {
+                    kind: NodeKind::Le { 
+                        lhs: P::new(node), 
+                        rhs: P::new(self.add()) 
+                    }
+                };
+            }
+            else if self.tok_is(">") {
+                self.advance();
+                node = Node {
+                    kind: NodeKind::Lt { 
+                        lhs: P::new(self.add()),
+                        rhs: P::new(node)
+                    }
+                };
+            }
+            else if self.tok_is(">=") {
+                self.advance();
+                node = Node {
+                    kind: NodeKind::Le { 
+                        lhs: P::new(self.add()),
+                        rhs: P::new(node)
+                    }
+                };
+            }
+            else {
+                break;
+            }
+        }
+
+        node
+    }
+
+    // add = mul ("+" mul | "-" mul)*
+    fn add(&mut self) -> Node {
+        let mut node = self.mul();
+        
+        loop {
+            if self.tok_is("+") {
+                self.advance();
+                node = Node {
+                    kind: NodeKind::Add { 
+                        lhs: P::new(node), 
+                        rhs: P::new(self.mul()) 
+                    }
+                };
+            }
+            else if self.tok_is("-") {
+                self.advance();
+                node = Node {
+                    kind: NodeKind::Sub { 
+                        lhs: P::new(node), 
+                        rhs: P::new(self.mul()) 
+                    }
+                };
+            }
+            else {
+                break;
+            }
+        }
+
+        node
+    }
+
+    // mul = unary ("*" unary | "/" unary)*
+    fn mul(&mut self) -> Node {
+        let mut node = self.unary();
+        
+        loop {
+            if self.tok_is("*") {
+                self.advance();
+                node = Node {
+                    kind: NodeKind::Mul { 
+                        lhs: P::new(node), 
+                        rhs: P::new(self.unary()) 
+                    }
+                };
+            }
+            else if self.tok_is("/") {
+                self.advance();
+                node = Node {
+                    kind: NodeKind::Div { 
+                        lhs: P::new(node), 
+                        rhs: P::new(self.unary()) 
+                    }
+                };
+            }
+            else {
+                break;
+            }
+        }
+
+        node
+    }
+
+    // unary = ("+" | "-") unary
+    //       | primary
+    fn unary(&mut self) -> Node {
+        if self.tok_is("+") {
+            self.advance();
+            return self.unary()
+        }
+        
+        if self.tok_is("-") {
+            self.advance();
+            return Node { kind: NodeKind::Neg { expr: P::new(self.unary()) }}
+        }
+
+        self.primary()
+    }
+
+    // primary = "(" expr ")" | num
+    fn primary(&mut self) -> Node {
+        match self.peek().kind {
+            TokenKind::Num { val } => {
+                self.advance();
+                return Node { kind: NodeKind::Num { val } }
+            }
+            TokenKind::Punct => 
+                if self.tok_is("(") {
+                    self.advance();
+                    let node = self.expr();
+                    self.skip(")");
+                    return node
+                },
+            _ => {}
+        };
+        self.error_tok(self.peek(), "expected an expression");
+    }
+
+    fn peek(&self) -> &Token { &self.toks[self.tok_index] }
+    fn advance(&mut self) {
+        if self.tok_index >= self.toks.len() {
+            panic!("Unexpected end of file");
+        }
+        self.tok_index += 1;
+    }
+
+    fn tok_is(&self, s: &str) -> bool {
+        let tok = self.peek();
+        self.src[tok.offset..(tok.offset + tok.length)].eq(s.as_bytes())
+    }
+
+    fn skip(&mut self, s: &str) {
+        if !self.tok_is(s) {
+            self.error_tok(self.peek(), &format!("Expected {}", s));
+        }
+        self.advance();
+    }
+
+    pub fn ensure_done(&self) {
+        match self.peek().kind {
+            TokenKind::Eof => {},
+            _ => self.error_tok(self.peek(), "extra token")
+        }
+    }
+}
