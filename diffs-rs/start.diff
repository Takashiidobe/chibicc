diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..eee0367
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,9 @@
+/target
+
+**/*~
+**/\#*
+**/*.o
+**/*.s
+**/a.out
+/tmp*
+/chibicc
diff --git a/Cargo.lock b/Cargo.lock
new file mode 100644
index 0000000..23c18f4
--- /dev/null
+++ b/Cargo.lock
@@ -0,0 +1,7 @@
+# This file is automatically @generated by Cargo.
+# It is not intended for manual editing.
+version = 3
+
+[[package]]
+name = "chibicc"
+version = "0.1.0"
diff --git a/Cargo.toml b/Cargo.toml
new file mode 100644
index 0000000..0dcd8ce
--- /dev/null
+++ b/Cargo.toml
@@ -0,0 +1,8 @@
+[package]
+name = "chibicc"
+version = "0.1.0"
+edition = "2021"
+
+# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
+
+[dependencies]
diff --git a/src/main.rs b/src/main.rs
new file mode 100644
index 0000000..bb90b8d
--- /dev/null
+++ b/src/main.rs
@@ -0,0 +1,15 @@
+use std::env;
+use std::process;
+
+fn main() {
+    let args: Vec<String> = env::args().collect();
+    if args.len() != 2 {
+        eprintln!("{}: invalid number of arguments", args[0]);
+        process::exit(1);
+    }
+
+    println!("  .globl main");
+    println!("main:");
+    println!("  mov ${}, %rax", args[1].parse::<i32>().unwrap());
+    println!("  ret");
+}
diff --git a/test.sh b/test.sh
new file mode 100755
index 0000000..330d970
--- /dev/null
+++ b/test.sh
@@ -0,0 +1,24 @@
+#!/bin/bash
+assert() {
+  expected="$1"
+  input="$2"
+
+  ./target/debug/chibicc "$input" > tmp.s || exit
+  gcc -static -o tmp tmp.s -z execstack -z execstack
+  ./tmp
+  actual="$?"
+
+  if [ "$actual" = "$expected" ]; then
+    echo "$input => $actual"
+  else
+    echo "$input => $expected expected, but got $actual"
+    exit 1
+  fi
+}
+
+cargo build
+
+assert 0 0
+assert 42 42
+
+echo OK
