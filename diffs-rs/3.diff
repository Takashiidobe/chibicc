diff --git a/src/main.rs b/src/main.rs
index 8e4ad80..ef92500 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -14,47 +14,55 @@ pub struct Token {
     kind: TokenKind
 }
 
-pub struct Compiler {
-    current_input: Vec<u8>,
+type P<A> = Box<A>;
+
+pub enum NodeKind {
+    Num { val: i32 },
+
+    Add { lhs: P<Node>, rhs: P<Node> },
+    Sub { lhs: P<Node>, rhs: P<Node> },
+    Mul { lhs: P<Node>, rhs: P<Node> },
+    Div { lhs: P<Node>, rhs: P<Node> }
 }
 
-impl Compiler {
-    pub fn new(src: &str) -> Self {
-        Self {
-            current_input: src.as_bytes().to_vec()
-        }
-    }
+pub struct Node {
+    kind: NodeKind
+}
 
-    pub fn compile(&self) {
-        let toks = self.tokenize();
-        let mut toki = toks.iter();
+trait ErrorReporting {
+    fn src(&self) -> &[u8];
 
-        println!("  .globl main");
-        println!("main:");
-        println!("  mov ${}, %rax", self.get_number(toki.next().unwrap()));
+    fn error_at(&self, offset: usize, msg: &str) -> ! {
+        eprintln!("{}", String::from_utf8_lossy(&self.src()));
+        eprint!("{: <1$}", "", offset);
+        eprintln!("^ {}", msg);
+        panic!();
+    }
     
-        while let Some(tok) = toki.next() {
-            if self.equal(tok, "+") {
-                println!("  add ${}, %rax", self.get_number(toki.next().unwrap()));
-            }
-            else if self.equal(tok, "-") {
-                println!("  sub ${}, %rax", self.get_number(toki.next().unwrap()));
-            }
-            else {
-                match tok.kind {
-                    TokenKind::Eof => break,
-                    _ => self.error_tok(tok, "unexpected token")
-                };
-            }
+    fn error_tok(&self, tok: &Token, msg: &str) -> ! {
+        self.error_at(tok.offset, msg);
+    }
+}
+
+pub struct Lexer<'a> {
+    src: &'a [u8],
+}
+
+impl<'a> ErrorReporting for Lexer<'a> {
+    fn src(&self) -> &[u8] { self.src }
+}
+
+impl<'a> Lexer<'a> {
+    pub fn new(src: &'a [u8]) -> Self {
+        Self {
+            src
         }
-    
-        println!("  ret");
     }
 
     fn tokenize(&self) -> Vec<Token> {
         let mut toks = Vec::new();
         let mut offset = 0;
-        let buf = &self.current_input;
+        let buf = &self.src;
     
         while offset < buf.len() {
             let c = buf[offset];
@@ -74,7 +82,7 @@ impl Compiler {
                 });
                 offset += count;
             }
-            else if c == b'+' || c == b'-' {
+            else if ispunct(c) {
                 toks.push(Token {
                     offset,
                     length: 1,
@@ -90,28 +98,6 @@ impl Compiler {
         toks.push(Token { offset, length: 0, kind: TokenKind::Eof });
         toks
     }
-    
-    fn equal(&self, tok: &Token, s: &str) -> bool {
-        self.current_input[tok.offset..(tok.offset + tok.length)].eq(s.as_bytes())
-    }
-
-    fn get_number(&self, tok: &Token) -> i32 {
-        match tok.kind {
-            TokenKind::Num { val } => val,
-            _ => self.error_tok(tok, "expected a number")
-        }
-    }
-
-    fn error_at(&self, offset: usize, msg: &str) -> ! {
-        eprintln!("{}", String::from_utf8_lossy(&self.current_input));
-        eprint!("{: <1$}", "", offset);
-        eprintln!("^ {}", msg);
-        panic!();
-    }
-    
-    fn error_tok(&self, tok: &Token, msg: &str) -> ! {
-        self.error_at(tok.offset, msg);
-    }
 }
 
 fn read_int(buf: &[u8], start_offset: usize) -> (i32, usize) {
@@ -130,12 +116,237 @@ fn read_int(buf: &[u8], start_offset: usize) -> (i32, usize) {
     return (acc, offset - start_offset);
 }
 
+fn ispunct(c: u8) -> bool {
+    return c == b'+' || c == b'-' || c == b'*' || c == b'/' || c == b'(' || c == b')';
+}
+
+pub struct Parser<'a> {
+    src: &'a [u8],
+    toks: &'a [Token],
+    tok_index: usize
+}
+
+impl<'a> ErrorReporting for Parser<'a> {
+    fn src(&self) -> &[u8] { self.src }
+}
+
+impl<'a> Parser<'a> {
+    fn new(src: &'a [u8], toks: &'a [Token]) -> Self {
+        if toks.is_empty() {
+            panic!("Empty token array")
+        }
+        Self {
+            src,
+            toks,
+            tok_index: 0,
+        }
+    }
+
+    fn expr(&mut self) -> Node {
+        let mut node = self.mul();
+        
+        loop {
+            match self.peek().kind {
+                TokenKind::Punct => {
+                    if self.tok_is("+") {
+                        self.advance();
+                        node = Node {
+                            kind: NodeKind::Add { 
+                                lhs: P::new(node), 
+                                rhs: P::new(self.mul()) 
+                            }
+                        }
+                    }
+                    else if self.tok_is("-") {
+                        self.advance();
+                        node = Node {
+                            kind: NodeKind::Sub { 
+                                lhs: P::new(node), 
+                                rhs: P::new(self.mul()) 
+                            }
+                        }
+                    }
+                    else {
+                        break;
+                    }
+                },
+                _ => break
+            }
+        }
+
+        node
+    }
+
+    fn mul(&mut self) -> Node {
+        let mut node = self.primary();
+        
+        loop {
+            match self.peek().kind {
+                TokenKind::Punct => {
+                    if self.tok_is("*") {
+                        self.advance();
+                        node = Node {
+                            kind: NodeKind::Mul { 
+                                lhs: P::new(node), 
+                                rhs: P::new(self.mul()) 
+                            }
+                        }
+                    }
+                    else if self.tok_is("/") {
+                        self.advance();
+                        node = Node {
+                            kind: NodeKind::Div { 
+                                lhs: P::new(node), 
+                                rhs: P::new(self.mul()) 
+                            }
+                        }
+                    }
+                    else {
+                        break;
+                    }
+                },
+                _ => break
+            }
+        }
+
+        node
+    }
+
+    fn primary(&mut self) -> Node {
+        match self.peek().kind {
+            TokenKind::Num { val } => {
+                self.advance();
+                return Node { kind: NodeKind::Num { val } }
+            }
+            TokenKind::Punct => 
+                if self.tok_is("(") {
+                    self.advance();
+                    let node = self.expr();
+                    self.skip(")");
+                    return node
+                },
+            _ => {}
+        };
+        self.error_tok(self.peek(), "expected an expression")
+    }
+
+    fn peek(&self) -> &Token { &self.toks[self.tok_index] }
+    fn advance(&mut self) {
+        if self.tok_index >= self.toks.len() {
+            panic!("Unexpected end of file");
+        }
+        self.tok_index += 1;
+    }
+
+    fn tok_is(&self, s: &str) -> bool {
+        let tok = self.peek();
+        self.src[tok.offset..(tok.offset + tok.length)].eq(s.as_bytes())
+    }
+
+    fn skip(&mut self, s: &str) {
+        if !self.tok_is(s) {
+            self.error_tok(self.peek(), &format!("Expected {}", s));
+        }
+        self.advance();
+    }
+
+    fn ensure_done(&self) {
+        match self.peek().kind {
+            TokenKind::Eof => {},
+            _ => self.error_tok(self.peek(), "extra token")
+        }
+    }
+}
+
+pub struct Codegen<'a> {
+    src: &'a [u8],
+    depth: i64,
+}
+
+impl<'a> ErrorReporting for Codegen<'a> {
+    fn src(&self) -> &[u8] { self.src }
+}
+
+impl<'a> Codegen<'a> {
+    fn new(src: &'a [u8]) -> Self {
+        Self {
+            src,
+            depth: 0
+        }
+    }
+
+    fn program(&mut self, node: &Node) {
+        println!("  .globl main");
+        println!("main:");
+        self.expr(node);
+        println!("  ret");
+    }
+
+    fn push(&mut self) {
+        println!("  push %rax");
+        self.depth += 1;
+    }
+
+    fn pop(&mut self, arg: &str) {
+        println!("  pop {}", arg);
+        self.depth -= 1;
+    }
+
+    fn expr(&mut self, node: &Node) {
+        match node.kind {
+            NodeKind::Num { val } => println!("  mov ${}, %rax", val),
+            NodeKind::Add { ref lhs, ref rhs } => {
+                self.expr(rhs.as_ref());
+                self.push();
+                self.expr(lhs.as_ref());
+                self.pop("%rdi");
+                println!("  add %rdi, %rax");
+            },
+            NodeKind::Sub { ref lhs, ref rhs } => {
+                self.expr(rhs.as_ref());
+                self.push();
+                self.expr(lhs.as_ref());
+                self.pop("%rdi");
+                println!("  sub %rdi, %rax");
+            },
+            NodeKind::Mul { ref lhs, ref rhs } => {
+                self.expr(rhs.as_ref());
+                self.push();
+                self.expr(lhs.as_ref());
+                self.pop("%rdi");
+                println!("  imul %rdi, %rax");
+            },
+            NodeKind::Div { ref lhs, ref rhs } => {
+                self.expr(rhs.as_ref());
+                self.push();
+                self.expr(lhs.as_ref());
+                self.pop("%rdi");
+                println!("  cqo");
+                println!("  idiv %rdi, %rax");
+            },
+        };
+    }
+}
+
 fn main() {
     let args: Vec<String> = env::args().collect();
     if args.len() != 2 {
         panic!("{}: invalid number of arguments", args[0]);
     }
 
-    let compiler = Compiler::new(&args[1]);
-    compiler.compile();
+    let src = args[1].as_bytes();
+
+    let lexer = Lexer::new(src);
+
+    let toks = lexer.tokenize();
+
+    let mut parser = Parser::new(src, &toks);
+
+    let node = parser.expr();
+    parser.ensure_done();
+
+    let mut codegen = Codegen::new(src);
+    codegen.program(&node);
+    
+    assert!(codegen.depth == 0);
 }
\ No newline at end of file
diff --git a/test.sh b/test.sh
index d7c45d1..4fbd82d 100755
--- a/test.sh
+++ b/test.sh
@@ -24,6 +24,9 @@ assert 0 0
 assert 42 42
 assert 21 '5+20-4'
 assert 41 ' 12 +  34 - 5'
+assert 47 '5+6*7'
+assert 15 '5*(9-6)'
+assert 4 '(3+5)/2'
 
 rm -f tmp tmp.s
 
