diff --git a/src/codegen.rs b/src/codegen.rs
index c879862..08b47b5 100644
--- a/src/codegen.rs
+++ b/src/codegen.rs
@@ -7,7 +7,9 @@ fn update_stack_info(node: &mut TopLevelNode) {
             let mut offset = 0;
             for local in locals {
                 offset -= 8;
-                local.borrow_mut().stack_offset = offset;
+                let mut local = local.borrow_mut();
+                local.stack_offset = offset;
+                println!("# Var {} offset {}", String::from_utf8_lossy(&local.name), local.stack_offset);
             }
             *stack_size = align_to(-offset, 16);
         }
@@ -128,6 +130,13 @@ impl<'a> Codegen<'a> {
                 self.addr(node);
                 println!("  mov (%rax), %rax");
             }
+            ExprKind::Addr(ref expr) => {
+                self.addr(expr);
+            },
+            ExprKind::Deref(ref expr) => {
+                self.expr(expr);
+                println!("  mov (%rax), %rax");
+            },
             ExprKind::Assign(ref lhs, ref rhs) => {
                 self.addr(lhs);
                 self.push();
@@ -199,17 +208,20 @@ impl<'a> Codegen<'a> {
                 println!("  cmp %rdi, %rax");
                 println!("  setl %al");
                 println!("  movzb %al, %rax");
-            }
+            },
         };
     }
 
-    fn addr(&self, expr: &ExprNode) {
-        if let ExprKind::Var(ref data) = expr.kind {
-            println!("  lea {}(%rbp), %rax", &data.borrow().stack_offset);
-            return;
-        }
-
-        self.error_at(expr.offset, "not an lvalue");
+    fn addr(&mut self, expr: &ExprNode) {
+        match expr.kind {
+            ExprKind::Var(ref data) => {
+                println!("  lea {}(%rbp), %rax", &data.borrow().stack_offset);
+            },
+            ExprKind::Deref(ref expr) => {
+                self.expr(expr);
+            }
+            _ => self.error_at(expr.offset, "not an lvalue"),
+        };
     }
 
     fn next_id(&mut self) -> usize {
diff --git a/src/lexer.rs b/src/lexer.rs
index 6c74d14..8a44be1 100644
--- a/src/lexer.rs
+++ b/src/lexer.rs
@@ -123,7 +123,7 @@ fn read_int(buf: &[u8]) -> (i32, usize) {
 fn ispunct(c: u8) -> bool {
     return c == b';' || c == b'=' || c == b'{' || c == b'}' ||
         c == b'+' || c == b'-' || c == b'*' || c == b'/' ||
-        c == b'(' || c == b')' || c == b'<' || c == b'>';
+        c == b'(' || c == b')' || c == b'<' || c == b'>' || c == b'&';
 }
 
 fn is_ident_start(c: u8) -> bool {
diff --git a/src/main.rs b/src/main.rs
index 675d22b..66b3096 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -24,7 +24,7 @@ fn main() {
 
     let mut parser = Parser::new(src, &toks);
 
-    let mut node = parser.function();
+    let mut node = parser.source_unit();
     parser.ensure_done();
 
     let mut codegen = Codegen::new(src, &mut node);
diff --git a/src/parser.rs b/src/parser.rs
index 2fcd5c0..adf19cd 100644
--- a/src/parser.rs
+++ b/src/parser.rs
@@ -1,5 +1,4 @@
 use std::cell::RefCell;
-use std::collections::HashMap;
 use std::rc::Rc;
 
 use crate::lexer::{Token, TokenKind};
@@ -26,6 +25,9 @@ pub enum ExprKind {
     Num(i32),
     Var(SP<VarData>),
 
+    Addr(P<ExprNode>),
+    Deref(P<ExprNode>),
+
     Add(P<ExprNode>, P<ExprNode>),
     Sub(P<ExprNode>, P<ExprNode>),
     Mul(P<ExprNode>, P<ExprNode>),
@@ -62,7 +64,7 @@ pub struct Parser<'a> {
     src: &'a [u8],
     toks: &'a [Token],
     tok_index: usize,
-    vars: HashMap<AsciiStr, SP<VarData>>,
+    vars: Vec<SP<VarData>>,
 }
 
 impl<'a> ErrorReporting for Parser<'a> {
@@ -78,21 +80,20 @@ impl<'a> Parser<'a> {
             src,
             toks,
             tok_index: 0,
-            vars: HashMap::new()
+            vars: Vec::new()
         }
     }
 
-    // function = stmt+
-    pub fn function(&mut self) -> TopLevelNode {
+    // source_unit = stmt+
+    pub fn source_unit(&mut self) -> TopLevelNode {
         let mut stmts = Vec::new();
         let offset = self.peek().offset;
         while !self.is_done() {
             stmts.push(self.stmt())
         }
-        let mut locals = Vec::new();
-        for el in self.vars.values() {
-            locals.push(el.clone());
-        }
+
+        // Reverse them to keep the locals layout in line with chibicc
+        let locals = self.vars.clone().into_iter().rev().collect();
         TopLevelNode { kind: TopLevelKind::SourceUnit(locals, stmts, -1), offset }
     }
 
@@ -326,7 +327,7 @@ impl<'a> Parser<'a> {
         node
     }
 
-    // unary = ("+" | "-") unary
+    // unary = ("+" | "-" | "*" | "&") unary
     //       | primary
     fn unary(&mut self) -> ExprNode {
         if self.tok_is("+") {
@@ -339,6 +340,16 @@ impl<'a> Parser<'a> {
             return ExprNode { kind: ExprKind::Neg(P::new(self.unary())), offset }
         }
 
+        if self.tok_is("&") {
+            let offset = self.advance().offset;
+            return ExprNode { kind: ExprKind::Addr(P::new(self.unary())), offset }
+        }
+
+        if self.tok_is("*") {
+            let offset = self.advance().offset;
+            return ExprNode { kind: ExprKind::Deref(P::new(self.unary())), offset }
+        }
+
         self.primary()
     }
 
@@ -353,9 +364,14 @@ impl<'a> Parser<'a> {
                 let tok = self.peek();
                 let offset = tok.offset;
                 let name = self.tok_source(tok).to_owned();
-                let var_data = self.vars.entry(name.clone()).or_insert_with(||
-                    Rc::new(RefCell::new(VarData { name, stack_offset: -1 }))
-                );
+                let var_data =
+                    match self.vars.iter().find(|v| v.borrow().name == name) {
+                        Some(var_data) => var_data,
+                        None => {
+                            self.vars.push(Rc::new(RefCell::new(VarData { name, stack_offset: -1 })));
+                            self.vars.last().unwrap()
+                        }
+                    };
                 let expr = ExprNode { kind: ExprKind::Var(var_data.clone()), offset };
                 self.advance();
                 return expr;
diff --git a/test.sh b/test.sh
index 6f9b6e9..43016e2 100755
--- a/test.sh
+++ b/test.sh
@@ -78,6 +78,14 @@ assert 3 '{ for (;;) {return 3;} return 5; }'
 
 assert 10 '{ i=0; while(i<10) { i=i+1; } return i; }'
 
+assert 3 '{ x=3; return *&x; }'
+assert 3 '{ x=3; y=&x; z=&y; return **z; }'
+assert 5 '{ x=3; y=5; return *(&x+8); }'
+assert 3 '{ x=3; y=5; return *(&y-8); }'
+assert 5 '{ x=3; y=&x; *y=5; return x; }'
+assert 7 '{ x=3; y=5; *(&x+8)=7; return y; }'
+assert 7 '{ x=3; y=5; *(&y-8)=7; return x; }'
+
 rm -f tmp tmp.s
 
 echo OK
