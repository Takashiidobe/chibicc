diff --git a/src/lexer.rs b/src/lexer.rs
index 032b2fa..45bb238 100644
--- a/src/lexer.rs
+++ b/src/lexer.rs
@@ -23,7 +23,8 @@ lazy_static! {
         [
             "return",
             "if", "else",
-            "for", "while"
+            "for", "while",
+            "int"
         ].map(|k| k.as_bytes()).into()
     };
 }
@@ -121,7 +122,7 @@ fn read_int(buf: &[u8]) -> (i64, usize) {
 }
 
 fn ispunct(c: u8) -> bool {
-    return c == b';' || c == b'=' || c == b'{' || c == b'}' ||
+    return c == b';' || c == b'=' || c == b'{' || c == b'}' || c == b',' ||
         c == b'+' || c == b'-' || c == b'*' || c == b'/' ||
         c == b'(' || c == b')' || c == b'<' || c == b'>' || c == b'&';
 }
diff --git a/src/parser.rs b/src/parser.rs
index 4f0e53f..0ff47dc 100644
--- a/src/parser.rs
+++ b/src/parser.rs
@@ -25,6 +25,7 @@ pub struct Node<Kind> {
 #[derive(Debug)]
 pub struct VarData {
     pub name: AsciiStr,
+    pub ty: Ty,
     pub stack_offset: i64
 }
 
@@ -96,9 +97,7 @@ impl<'a> Parser<'a> {
     pub fn source_unit(&mut self) -> TopLevelNode {
         let mut stmts = Vec::new();
         let offset = self.peek().offset;
-        while !self.is_done() {
-            stmts.push(self.stmt())
-        }
+        stmts.push(self.compound_stmt());
 
         // Reverse them to keep the locals layout in line with chibicc
         let locals = self.vars.clone().into_iter().rev().collect();
@@ -171,17 +170,82 @@ impl<'a> Parser<'a> {
         self.expr_stmt()
     }
 
-    // compound_stmt = "{" stmt+ "}
+    // compound_stmt = "{" (declaration | stmt)* "}
     fn compound_stmt(&mut self) -> StmtNode {
         let offset = self.skip("{").offset;
         let mut stmts = Vec::new();
         while !self.tok_is("}") {
-            stmts.push(self.stmt());
+            if self.tok_is("int") {
+                self.declaration(&mut stmts);
+            }
+            else {
+                stmts.push(self.stmt());
+            }
         }
         self.advance();
         StmtNode { kind: StmtKind::Block(stmts), offset, ty: Ty::Unit }
     }
 
+    // declaration = declspec (declarator ("=" expr)? ("," declarator ("=" expr)?)*)? ";"
+    fn  declaration(&mut self, stmts: &mut Vec<StmtNode>) {
+        let base_ty = self.declspec();
+
+        let mut count = 0;
+        while !self.tok_is(";") {
+            if count > 0 {
+                self.skip(",");
+            }
+            count += 1;
+
+            let offset = self.peek().offset;
+            let (ty, name) = self.declarator(&base_ty);
+            let var_data = Rc::new(RefCell::new(VarData { name, ty: ty.clone(), stack_offset: -1 }));
+            self.vars.push(var_data.clone());
+
+            if !self.tok_is("=") {
+                continue;
+            }
+
+            self.advance();
+            let lhs = ExprNode { kind: ExprKind::Var(var_data), offset, ty };
+            let rhs = self.assign();
+            let rhs_ty = rhs.ty.clone();
+            stmts.push(StmtNode {
+                kind: StmtKind::Expr(ExprNode {
+                    kind: ExprKind::Assign(P::new(lhs), P::new(rhs)),
+                    offset,
+                    ty: rhs_ty,
+                }),
+                offset,
+                ty: Ty::Unit
+            });
+        }
+    }
+
+    // declspec = "int"
+    fn declspec(&mut self) -> Ty {
+        self.skip("int");
+        Ty::Int
+    }
+
+    // declarator = "*"* ident
+    fn declarator(&mut self, base_ty: &Ty) -> (Ty, AsciiStr) {
+        let mut ty = base_ty.clone();
+        while self.tok_is("*") {
+            self.advance();
+            ty = Ty::Ptr(P::new(ty));
+        }
+
+        match self.peek().kind {
+            TokenKind::Ident => {
+                let name = self.tok_source(self.peek()).to_owned();
+                self.advance();
+                (ty, name)
+            },
+            _ => self.error_tok(self.peek(), "expected a variable name")
+        }
+    }
+
     // expr-stmt = expr? ";"
     fn expr_stmt(&mut self) -> StmtNode {
         if self.tok_is(";") {
@@ -448,17 +512,15 @@ impl<'a> Parser<'a> {
                 let tok = self.peek();
                 let offset = tok.offset;
                 let name = self.tok_source(tok).to_owned();
-                let var_data =
-                    match self.vars.iter().find(|v| v.borrow().name == name) {
-                        Some(var_data) => var_data,
-                        None => {
-                            self.vars.push(Rc::new(RefCell::new(VarData { name, stack_offset: -1 })));
-                            self.vars.last().unwrap()
-                        }
-                    };
-                let expr = ExprNode { kind: ExprKind::Var(var_data.clone()), offset, ty: Ty::Int };
-                self.advance();
-                return expr;
+                let var_data = self.vars.iter().find(|v| v.borrow().name == name);
+                if let Some(var_data) = var_data {
+                    let expr = ExprNode { kind: ExprKind::Var(var_data.clone()), offset, ty: Ty::Int };
+                    self.advance();
+                    return expr;
+                }
+                else {
+                    self.error_at(offset, "undefined variable");
+                }
             }
             TokenKind::Punct =>
                 if self.tok_is("(") {
diff --git a/test.sh b/test.sh
index d4f2355..e40ddae 100755
--- a/test.sh
+++ b/test.sh
@@ -50,14 +50,15 @@ assert 1 '{ return 1>=0; }'
 assert 1 '{ return 1>=1; }'
 assert 0 '{ return 1>=2; }'
 
-assert 3 '{ a=3; return a; }'
-assert 8 '{ a=3; z=5; return a+z; }'
+assert 3 '{ int a; a=3; return a; }'
+assert 3 '{ int a=3; return a; }'
+assert 8 '{ int a=3; int z=5; return a+z; }'
 
-assert 3 '{ a=3; return a; }'
-assert 8 '{ a=3; z=5; return a+z; }'
-assert 6 '{ a=b=3; return a+b; }'
-assert 3 '{ foo=3; return foo; }'
-assert 8 '{ foo123=3; bar=5; return foo123+bar; }'
+assert 3 '{ int a=3; return a; }'
+assert 8 '{ int a=3; int z=5; return a+z; }'
+assert 6 '{ int a; int b; a=b=3; return a+b; }'
+assert 3 '{ int foo=3; return foo; }'
+assert 8 '{ int foo123=3; int bar=5; return foo123+bar; }'
 
 assert 1 '{ return 1; 2; 3; }'
 assert 2 '{ 1; return 2; 3; }'
@@ -73,20 +74,27 @@ assert 2 '{ if (2-1) return 2; return 3; }'
 assert 4 '{ if (0) { 1; 2; return 3; } else { return 4; } }'
 assert 3 '{ if (1) { 1; 2; return 3; } else { return 4; } }'
 
-assert 55 '{ i=0; j=0; for (i=0; i<=10; i=i+1) j=i+j; return j; }'
-assert 3 '{ for (;;) {return 3;} return 5; }'
+assert 55 '{ int i=0; int j=0; for (i=0; i<=10; i=i+1) j=i+j; return j; }'
+assert 3 '{ for (;;) return 3; return 5; }'
 
-assert 10 '{ i=0; while(i<10) { i=i+1; } return i; }'
+assert 10 '{ int i=0; while(i<10) i=i+1; return i; }'
 
-assert 3 '{ x=3; return *&x; }'
-assert 3 '{ x=3; y=&x; z=&y; return **z; }'
-assert 5 '{ x=3; y=5; return *(&x+1); }'
-assert 3 '{ x=3; y=5; return *(&y-1); }'
-assert 5 '{ x=3; y=5; return *(&x-(-1)); }'
-assert 5 '{ x=3; y=&x; *y=5; return x; }'
-assert 7 '{ x=3; y=5; *(&x+1)=7; return y; }'
-assert 7 '{ x=3; y=5; *(&y-2+1)=7; return x; }'
-assert 5 '{ x=3; return (&x+2)-&x+3; }'
+assert 3 '{ {1; {2;} return 3;} }'
+
+assert 10 '{ int i=0; while(i<10) i=i+1; return i; }'
+assert 55 '{ int i=0; int j=0; while(i<=10) {j=i+j; i=i+1;} return j; }'
+
+assert 3 '{ int x=3; return *&x; }'
+assert 3 '{ int x=3; int *y=&x; int **z=&y; return **z; }'
+assert 5 '{ int x=3; int y=5; return *(&x+1); }'
+assert 3 '{ int x=3; int y=5; return *(&y-1); }'
+assert 5 '{ int x=3; int y=5; return *(&x-(-1)); }'
+assert 5 '{ int x=3; int *y=&x; *y=5; return x; }'
+assert 7 '{ int x=3; int y=5; *(&x+1)=7; return y; }'
+assert 7 '{ int x=3; int y=5; *(&y-2+1)=7; return x; }'
+assert 5 '{ int x=3; return (&x+2)-&x+3; }'
+assert 8 '{ int x, y; x=3; y=5; return x+y; }'
+assert 8 '{ int x=3, y=5; return x+y; }'
 
 rm -f tmp tmp.s
 
