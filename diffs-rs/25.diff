diff --git a/src/codegen.rs b/src/codegen.rs
index 68e8611..13c3808 100644
--- a/src/codegen.rs
+++ b/src/codegen.rs
@@ -1,19 +1,18 @@
 use crate::errors::ErrorReporting;
-use crate::parser::{TopLevelNode, TopLevelKind, StmtNode, StmtKind, ExprNode, ExprKind};
+use crate::parser::{DeclNode, DeclKind, StmtNode, StmtKind, ExprNode, ExprKind, SourceUnit};
 
 const ARG_REGS: [&str;6] = [
     "%rdi", "%rsi", "%rdx", "%rcx", "%r8", "%r9"
 ];
 
-fn update_stack_info(node: &mut TopLevelNode) {
+fn update_stack_info(node: &mut DeclNode) {
     match node.kind {
-        TopLevelKind::SourceUnit(ref mut locals, _, ref mut stack_size) => {
+        DeclKind::Function(_, ref mut locals, _, ref mut stack_size) => {
             let mut offset = 0;
             for local in locals {
                 offset -= 8;
                 let mut local = local.borrow_mut();
                 local.stack_offset = offset;
-                println!("# Var {} offset {}", String::from_utf8_lossy(&local.name), local.stack_offset);
             }
             *stack_size = align_to(-offset, 16);
         }
@@ -22,9 +21,10 @@ fn update_stack_info(node: &mut TopLevelNode) {
 
 pub struct Codegen<'a> {
     src: &'a [u8],
+    su: SourceUnit,
     depth: i64,
-    top_node: &'a TopLevelNode<'a>,
     id_count: usize,
+    cur_fn: Option<DeclNode>,
 }
 
 impl<'a> ErrorReporting for Codegen<'a> {
@@ -32,37 +32,49 @@ impl<'a> ErrorReporting for Codegen<'a> {
 }
 
 impl<'a> Codegen<'a> {
-    pub fn new(src: &'a [u8], node: &'a mut TopLevelNode) -> Self {
-        update_stack_info(node);
+    pub fn new(src: &'a [u8], mut su: SourceUnit) -> Self {
+        for decl in &mut su {
+            update_stack_info(decl);
+        }
         Self {
             src,
+            su,
             depth: 0,
-            top_node: node,
-            id_count: 0
+            id_count: 0,
+            cur_fn: None
         }
     }
 
     pub fn program(&mut self) {
-        match self.top_node.kind {
-            TopLevelKind::SourceUnit(_, ref body, stack_size) => {
-                println!("  .globl main");
-                println!("main:");
+        // All the cloning sucks, but it will work until I figure out how to please the borrow checker...
+        // maybe by splitting the state up?
+        for decl in &self.su.clone() {
+            match decl.kind {
+                DeclKind::Function(ref name, ref locals, ref body, stack_size) => {
+                    self.cur_fn = Some(decl.clone());
+                    let name = String::from_utf8_lossy(name);
 
-                // Prologue
-                println!("  push %rbp");
-                println!("  mov %rsp, %rbp");
-                println!("  sub ${}, %rsp", stack_size);
-                println!();
+                    println!("  .globl {}", name);
+                    for local in locals {
+                        let local = local.borrow();
+                        println!("# var {} offset {}", String::from_utf8_lossy(&local.name), local.stack_offset);
+                    }
+                    println!("{}:", name);
 
-                for stmt in body {
-                    self.stmt(stmt)
-                }
+                    // Prologue
+                    println!("  push %rbp");
+                    println!("  mov %rsp, %rbp");
+                    println!("  sub ${}, %rsp", stack_size);
+                    println!();
 
-                println!();
-                println!(".L.return:");
-                println!("  mov %rbp, %rsp");
-                println!("  pop %rbp");
-                println!("  ret");
+                    self.stmt(body);
+
+                    println!();
+                    println!(".L.return.{}:", name);
+                    println!("  mov %rbp, %rsp");
+                    println!("  pop %rbp");
+                    println!("  ret");
+                }
             }
         }
     }
@@ -72,7 +84,8 @@ impl<'a> Codegen<'a> {
             StmtKind::Expr(ref expr) => self.expr(expr),
             StmtKind::Return(ref expr) => {
                 self.expr(expr);
-                println!("  jmp .L.return");
+                let DeclKind::Function(ref name, _, _, _) = &self.cur_fn.as_ref().unwrap().kind;
+                println!("  jmp .L.return.{}", String::from_utf8_lossy(name));
             },
             StmtKind::Block(ref stmts) => {
                 for stmt in stmts {
diff --git a/src/main.rs b/src/main.rs
index 66b3096..eb9f7d8 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -24,10 +24,10 @@ fn main() {
 
     let mut parser = Parser::new(src, &toks);
 
-    let mut node = parser.source_unit();
+    let su = parser.source_unit();
     parser.ensure_done();
 
-    let mut codegen = Codegen::new(src, &mut node);
+    let mut codegen = Codegen::new(src, su);
     codegen.program();
     codegen.sanity_checks();
 }
\ No newline at end of file
diff --git a/src/parser.rs b/src/parser.rs
index 2b1531b..208fe2c 100644
--- a/src/parser.rs
+++ b/src/parser.rs
@@ -12,24 +12,25 @@ pub type AsciiStr = Vec<u8>;
 pub enum Ty {
     Int,
     Ptr(P<Ty>),
+    Fn(P<Ty>),
     Unit
 }
 
-#[derive(Debug)]
+#[derive(Debug, Clone)]
 pub struct Node<Kind> {
     pub kind: Kind,
     pub offset: usize,
     pub ty: Ty
 }
 
-#[derive(Debug)]
+#[derive(Debug, Clone)]
 pub struct VarData {
     pub name: AsciiStr,
     pub ty: Ty,
     pub stack_offset: i64
 }
 
-#[derive(Debug)]
+#[derive(Debug, Clone)]
 pub enum ExprKind {
     Num(i64),
     Var(SP<VarData>),
@@ -53,7 +54,7 @@ pub enum ExprKind {
     Assign(P<ExprNode>, P<ExprNode>),
 }
 
-#[derive(Debug)]
+#[derive(Debug, Clone)]
 pub enum StmtKind {
     Expr(ExprNode),
     Return(ExprNode),
@@ -62,14 +63,15 @@ pub enum StmtKind {
     For(Option<P<StmtNode>>, Option<P<ExprNode>>, Option<P<ExprNode>>, P<StmtNode>)
 }
 
-#[derive(Debug)]
-pub enum TopLevelKind {
-    SourceUnit(Vec<SP<VarData>>, Vec<StmtNode>, i64)
+#[derive(Debug, Clone)]
+pub enum DeclKind {
+    Function(AsciiStr, Vec<SP<VarData>>, StmtNode, i64)
 }
 
 pub type ExprNode = Node<ExprKind>;
 pub type StmtNode = Node<StmtKind>;
-pub type TopLevelNode<'a> = Node<TopLevelKind>;
+pub type DeclNode = Node<DeclKind>;
+pub type SourceUnit = Vec<DeclNode>;
 
 pub struct Parser<'a> {
     src: &'a [u8],
@@ -96,14 +98,27 @@ impl<'a> Parser<'a> {
     }
 
     // source_unit = stmt+
-    pub fn source_unit(&mut self) -> TopLevelNode {
-        let mut stmts = Vec::new();
+    pub fn source_unit(&mut self) -> SourceUnit {
+        let mut fns = Vec::new();
+        loop {
+            match self.peek().kind {
+                TokenKind::Eof => break,
+                _ => fns.push(self.function()),
+            }
+        }
+        fns
+    }
+
+    pub fn function(&mut self) -> DeclNode {
         let offset = self.peek().offset;
-        stmts.push(self.compound_stmt());
+        let ty = self.declspec();
+        let (ty, name) = self.declarator(&ty);
 
+        self.vars.clear();
+        let body = self.compound_stmt();
         // Reverse them to keep the locals layout in line with chibicc
         let locals = self.vars.clone().into_iter().rev().collect();
-        TopLevelNode { kind: TopLevelKind::SourceUnit(locals, stmts, -1), offset, ty: Ty::Unit }
+        DeclNode { kind: DeclKind::Function(name, locals, body, -1), offset, ty }
     }
 
     // stmt = "return" expr ";"
@@ -230,7 +245,7 @@ impl<'a> Parser<'a> {
         Ty::Int
     }
 
-    // declarator = "*"* ident
+    // declarator = "*"* ident type-suffix
     fn declarator(&mut self, base_ty: &Ty) -> (Ty, AsciiStr) {
         let mut ty = base_ty.clone();
         while self.peek_is("*") {
@@ -242,12 +257,22 @@ impl<'a> Parser<'a> {
             TokenKind::Ident => {
                 let name = self.tok_source(self.peek()).to_owned();
                 self.advance();
-                (ty, name)
+                (self.type_suffix(ty), name)
             },
             _ => self.error_tok(self.peek(), "expected a variable name")
         }
     }
 
+    // type-suffix = ("(" func-params)?
+    fn type_suffix(&mut self, ty: Ty) -> Ty {
+        if self.peek_is("(") {
+            self.advance();
+            self.skip(")");
+            return Ty::Fn(P::new(ty));
+        }
+        return ty;
+    }
+
     // expr-stmt = expr? ";"
     fn expr_stmt(&mut self) -> StmtNode {
         if self.peek_is(";") {
diff --git a/test.sh b/test.sh
index 5039555..6b50682 100755
--- a/test.sh
+++ b/test.sh
@@ -31,89 +31,87 @@ cargo build || exit
 
 export RUST_BACKTRACE=1
 
-assert 0 '{ return 0; }'
-assert 42 '{ return 42; }'
-assert 21 '{ return 5+20-4; }'
-assert 41 '{ return  12 + 34 - 5 ; }'
-assert 47 '{ return 5+6*7; }'
-assert 15 '{ return 5*(9-6); }'
-assert 4 '{ return (3+5)/2; }'
-assert 10 '{ return -10+20; }'
-assert 10 '{ return - -10; }'
-assert 10 '{ return - - +10; }'
-
-assert 0 '{ return 0==1; }'
-assert 1 '{ return 42==42; }'
-assert 1 '{ return 0!=1; }'
-assert 0 '{ return 42!=42; }'
-
-assert 1 '{ return 0<1; }'
-assert 0 '{ return 1<1; }'
-assert 0 '{ return 2<1; }'
-assert 1 '{ return 0<=1; }'
-assert 1 '{ return 1<=1; }'
-assert 0 '{ return 2<=1; }'
-
-assert 1 '{ return 1>0; }'
-assert 0 '{ return 1>1; }'
-assert 0 '{ return 1>2; }'
-assert 1 '{ return 1>=0; }'
-assert 1 '{ return 1>=1; }'
-assert 0 '{ return 1>=2; }'
-
-assert 3 '{ int a; a=3; return a; }'
-assert 3 '{ int a=3; return a; }'
-assert 8 '{ int a=3; int z=5; return a+z; }'
-
-assert 3 '{ int a=3; return a; }'
-assert 8 '{ int a=3; int z=5; return a+z; }'
-assert 6 '{ int a; int b; a=b=3; return a+b; }'
-assert 3 '{ int foo=3; return foo; }'
-assert 8 '{ int foo123=3; int bar=5; return foo123+bar; }'
-
-assert 1 '{ return 1; 2; 3; }'
-assert 2 '{ 1; return 2; 3; }'
-assert 3 '{ 1; 2; return 3; }'
-
-assert 3 '{ {1; {2;} return 3;} }'
-assert 5 '{ ;;; return 5; }'
-
-assert 3 '{ if (0) return 2; return 3; }'
-assert 3 '{ if (1-1) return 2; return 3; }'
-assert 2 '{ if (1) return 2; return 3; }'
-assert 2 '{ if (2-1) return 2; return 3; }'
-assert 4 '{ if (0) { 1; 2; return 3; } else { return 4; } }'
-assert 3 '{ if (1) { 1; 2; return 3; } else { return 4; } }'
-
-assert 55 '{ int i=0; int j=0; for (i=0; i<=10; i=i+1) j=i+j; return j; }'
-assert 3 '{ for (;;) return 3; return 5; }'
-
-assert 10 '{ int i=0; while(i<10) i=i+1; return i; }'
-
-assert 3 '{ {1; {2;} return 3;} }'
-
-assert 10 '{ int i=0; while(i<10) i=i+1; return i; }'
-assert 55 '{ int i=0; int j=0; while(i<=10) {j=i+j; i=i+1;} return j; }'
-
-assert 3 '{ int x=3; return *&x; }'
-assert 3 '{ int x=3; int *y=&x; int **z=&y; return **z; }'
-assert 5 '{ int x=3; int y=5; return *(&x+1); }'
-assert 3 '{ int x=3; int y=5; return *(&y-1); }'
-assert 5 '{ int x=3; int y=5; return *(&x-(-1)); }'
-assert 5 '{ int x=3; int *y=&x; *y=5; return x; }'
-assert 7 '{ int x=3; int y=5; *(&x+1)=7; return y; }'
-assert 7 '{ int x=3; int y=5; *(&y-2+1)=7; return x; }'
-assert 5 '{ int x=3; return (&x+2)-&x+3; }'
-assert 8 '{ int x, y; x=3; y=5; return x+y; }'
-assert 8 '{ int x=3, y=5; return x+y; }'
-
-assert 3 '{ return ret3(); }'
-assert 5 '{ return ret5(); }'
-assert 8 '{ return add(3, 5); }'
-assert 2 '{ return sub(5, 3); }'
-assert 21 '{ return add6(1,2,3,4,5,6); }'
-assert 66 '{ return add6(1,2,add6(3,4,5,6,7,8),9,10,11); }'
-assert 136 '{ return add6(1,2,add6(3,add6(4,5,6,7,8,9),10,11,12,13),14,15,16); }'
+assert 0 'int main() { return 0; }'
+assert 42 'int main() { return 42; }'
+assert 21 'int main() { return 5+20-4; }'
+assert 41 'int main() { return  12 + 34 - 5 ; }'
+assert 47 'int main() { return 5+6*7; }'
+assert 15 'int main() { return 5*(9-6); }'
+assert 4 'int main() { return (3+5)/2; }'
+assert 10 'int main() { return -10+20; }'
+assert 10 'int main() { return - -10; }'
+assert 10 'int main() { return - - +10; }'
+
+assert 0 'int main() { return 0==1; }'
+assert 1 'int main() { return 42==42; }'
+assert 1 'int main() { return 0!=1; }'
+assert 0 'int main() { return 42!=42; }'
+
+assert 1 'int main() { return 0<1; }'
+assert 0 'int main() { return 1<1; }'
+assert 0 'int main() { return 2<1; }'
+assert 1 'int main() { return 0<=1; }'
+assert 1 'int main() { return 1<=1; }'
+assert 0 'int main() { return 2<=1; }'
+
+assert 1 'int main() { return 1>0; }'
+assert 0 'int main() { return 1>1; }'
+assert 0 'int main() { return 1>2; }'
+assert 1 'int main() { return 1>=0; }'
+assert 1 'int main() { return 1>=1; }'
+assert 0 'int main() { return 1>=2; }'
+
+assert 3 'int main() { int a; a=3; return a; }'
+assert 3 'int main() { int a=3; return a; }'
+assert 8 'int main() { int a=3; int z=5; return a+z; }'
+
+assert 1 'int main() { return 1; 2; 3; }'
+assert 2 'int main() { 1; return 2; 3; }'
+assert 3 'int main() { 1; 2; return 3; }'
+
+assert 3 'int main() { int a=3; return a; }'
+assert 8 'int main() { int a=3; int z=5; return a+z; }'
+assert 6 'int main() { int a; int b; a=b=3; return a+b; }'
+assert 3 'int main() { int foo=3; return foo; }'
+assert 8 'int main() { int foo123=3; int bar=5; return foo123+bar; }'
+
+assert 3 'int main() { if (0) return 2; return 3; }'
+assert 3 'int main() { if (1-1) return 2; return 3; }'
+assert 2 'int main() { if (1) return 2; return 3; }'
+assert 2 'int main() { if (2-1) return 2; return 3; }'
+
+assert 55 'int main() { int i=0; int j=0; for (i=0; i<=10; i=i+1) j=i+j; return j; }'
+assert 3 'int main() { for (;;) return 3; return 5; }'
+
+assert 10 'int main() { int i=0; while(i<10) i=i+1; return i; }'
+
+assert 3 'int main() { {1; {2;} return 3;} }'
+assert 5 'int main() { ;;; return 5; }'
+
+assert 10 'int main() { int i=0; while(i<10) i=i+1; return i; }'
+assert 55 'int main() { int i=0; int j=0; while(i<=10) {j=i+j; i=i+1;} return j; }'
+
+assert 3 'int main() { int x=3; return *&x; }'
+assert 3 'int main() { int x=3; int *y=&x; int **z=&y; return **z; }'
+assert 5 'int main() { int x=3; int y=5; return *(&x+1); }'
+assert 3 'int main() { int x=3; int y=5; return *(&y-1); }'
+assert 5 'int main() { int x=3; int y=5; return *(&x-(-1)); }'
+assert 5 'int main() { int x=3; int *y=&x; *y=5; return x; }'
+assert 7 'int main() { int x=3; int y=5; *(&x+1)=7; return y; }'
+assert 7 'int main() { int x=3; int y=5; *(&y-2+1)=7; return x; }'
+assert 5 'int main() { int x=3; return (&x+2)-&x+3; }'
+assert 8 'int main() { int x, y; x=3; y=5; return x+y; }'
+assert 8 'int main() { int x=3, y=5; return x+y; }'
+
+assert 3 'int main() { return ret3(); }'
+assert 5 'int main() { return ret5(); }'
+assert 8 'int main() { return add(3, 5); }'
+assert 2 'int main() { return sub(5, 3); }'
+assert 21 'int main() { return add6(1,2,3,4,5,6); }'
+assert 66 'int main() { return add6(1,2,add6(3,4,5,6,7,8),9,10,11); }'
+assert 136 'int main() { return add6(1,2,add6(3,add6(4,5,6,7,8,9),10,11,12,13),14,15,16); }'
+
+assert 32 'int main() { return ret32(); } int ret32() { return 32; }'
 
 rm -f tmp tmp2.o tmp.s
 
