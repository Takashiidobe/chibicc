diff --git a/src/parser.rs b/src/parser.rs
index f3e8efe..1c7de29 100644
--- a/src/parser.rs
+++ b/src/parser.rs
@@ -110,7 +110,7 @@ pub struct Function {
 
 #[derive(Debug)]
 pub enum BindingKind {
-    Tag,
+    Decl,
     GlobalVar { init_data: Option<Vec<u8>> },
     LocalVar { stack_offset: i64 },
     Function(Function),
@@ -321,6 +321,17 @@ impl<'a> Parser<'a> {
 
         let params = self.cur_fn_local_bindings.clone();
 
+        if self.peek_is(";") {
+            self.advance();
+            self.add_global(Rc::new(RefCell::new(Binding {
+                kind: BindingKind::Decl,
+                name,
+                ty,
+                loc,
+            })));
+            return;
+        }
+
         let body = self.compound_stmt();
         // Reverse them to keep the locals layout in line with chibicc
         let locals: Vec<SP<Binding>> = self.cur_fn_local_bindings.clone().into_iter().rev().collect();
@@ -640,7 +651,7 @@ impl<'a> Parser<'a> {
         let ty = if is_struct { Ty::strct(members) } else { Ty::union(members) };
         if tag.is_some() {
             self.add_tag(Rc::new(RefCell::new(Binding {
-                kind: BindingKind::Tag,
+                kind: BindingKind::Decl,
                 name: tag.unwrap().to_owned(),
                 ty: ty.clone(),
                 loc,
diff --git a/test/test.h b/test/test.h
index bdbd474..0e7b236 100644
--- a/test/test.h
+++ b/test/test.h
@@ -1 +1,3 @@
 #define ASSERT(x, y) assert(x, y, #y)
+
+int printf();
