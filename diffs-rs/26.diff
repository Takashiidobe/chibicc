diff --git a/src/codegen.rs b/src/codegen.rs
index 13c3808..5244631 100644
--- a/src/codegen.rs
+++ b/src/codegen.rs
@@ -1,13 +1,17 @@
 use crate::errors::ErrorReporting;
-use crate::parser::{DeclNode, DeclKind, StmtNode, StmtKind, ExprNode, ExprKind, SourceUnit};
+use crate::parser::{TopDeclNode, TopDeclKind, StmtNode, StmtKind, ExprNode, ExprKind, SourceUnit};
 
 const ARG_REGS: [&str;6] = [
     "%rdi", "%rsi", "%rdx", "%rcx", "%r8", "%r9"
 ];
 
-fn update_stack_info(node: &mut DeclNode) {
+fn update_stack_info(node: &mut TopDeclNode) {
     match node.kind {
-        DeclKind::Function(_, ref mut locals, _, ref mut stack_size) => {
+        TopDeclKind::Function {
+            ref locals,
+            ref mut stack_size,
+            ..
+        } => {
             let mut offset = 0;
             for local in locals {
                 offset -= 8;
@@ -24,7 +28,7 @@ pub struct Codegen<'a> {
     su: SourceUnit,
     depth: i64,
     id_count: usize,
-    cur_fn: Option<DeclNode>,
+    cur_fn: Option<TopDeclNode>,
 }
 
 impl<'a> ErrorReporting for Codegen<'a> {
@@ -50,13 +54,22 @@ impl<'a> Codegen<'a> {
         // maybe by splitting the state up?
         for decl in &self.su.clone() {
             match decl.kind {
-                DeclKind::Function(ref name, ref locals, ref body, stack_size) => {
+                TopDeclKind::Function {
+                    ref name,
+                    ref params,
+                    ref locals,
+                    ref body,
+                    stack_size
+                } => {
                     self.cur_fn = Some(decl.clone());
                     let name = String::from_utf8_lossy(name);
 
+                    println!();
                     println!("  .globl {}", name);
                     for local in locals {
-                        let local = local.borrow();
+                        // just borrow doesn't work anymore, god knows why...
+                        // at some point I need to study how Rc and RefCell actually work...
+                        let local = local.borrow_mut();
                         println!("# var {} offset {}", String::from_utf8_lossy(&local.name), local.stack_offset);
                     }
                     println!("{}:", name);
@@ -67,13 +80,20 @@ impl<'a> Codegen<'a> {
                     println!("  sub ${}, %rsp", stack_size);
                     println!();
 
+                    for (i, param) in params.iter().enumerate() {
+                        let param = param.borrow_mut();
+                        println!("  mov {}, {}(%rbp)", ARG_REGS[i], param.stack_offset);
+                    }
+
                     self.stmt(body);
+                    self.sanity_checks();
 
                     println!();
                     println!(".L.return.{}:", name);
                     println!("  mov %rbp, %rsp");
                     println!("  pop %rbp");
                     println!("  ret");
+                    println!();
                 }
             }
         }
@@ -84,7 +104,7 @@ impl<'a> Codegen<'a> {
             StmtKind::Expr(ref expr) => self.expr(expr),
             StmtKind::Return(ref expr) => {
                 self.expr(expr);
-                let DeclKind::Function(ref name, _, _, _) = &self.cur_fn.as_ref().unwrap().kind;
+                let TopDeclKind::Function { ref name, .. } = &self.cur_fn.as_ref().unwrap().kind;
                 println!("  jmp .L.return.{}", String::from_utf8_lossy(name));
             },
             StmtKind::Block(ref stmts) => {
@@ -244,7 +264,7 @@ impl<'a> Codegen<'a> {
     fn addr(&mut self, expr: &ExprNode) {
         match expr.kind {
             ExprKind::Var(ref data) => {
-                println!("  lea {}(%rbp), %rax", &data.borrow().stack_offset);
+                println!("  lea {}(%rbp), %rax", &data.borrow_mut().stack_offset);
             },
             ExprKind::Deref(ref expr) => {
                 self.expr(expr);
diff --git a/src/main.rs b/src/main.rs
index eb9f7d8..57c50ff 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -29,5 +29,4 @@ fn main() {
 
     let mut codegen = Codegen::new(src, su);
     codegen.program();
-    codegen.sanity_checks();
 }
\ No newline at end of file
diff --git a/src/parser.rs b/src/parser.rs
index 208fe2c..febb4e3 100644
--- a/src/parser.rs
+++ b/src/parser.rs
@@ -12,7 +12,7 @@ pub type AsciiStr = Vec<u8>;
 pub enum Ty {
     Int,
     Ptr(P<Ty>),
-    Fn(P<Ty>),
+    Fn(P<Ty>, Vec<P<Ty>>),
     Unit
 }
 
@@ -64,14 +64,20 @@ pub enum StmtKind {
 }
 
 #[derive(Debug, Clone)]
-pub enum DeclKind {
-    Function(AsciiStr, Vec<SP<VarData>>, StmtNode, i64)
+pub enum TopDeclKind {
+    Function {
+        name: AsciiStr,
+        params: Vec<SP<VarData>>,
+        locals: Vec<SP<VarData>>,
+        body: StmtNode,
+        stack_size: i64
+    }
 }
 
 pub type ExprNode = Node<ExprKind>;
 pub type StmtNode = Node<StmtKind>;
-pub type DeclNode = Node<DeclKind>;
-pub type SourceUnit = Vec<DeclNode>;
+pub type TopDeclNode = Node<TopDeclKind>;
+pub type SourceUnit = Vec<TopDeclNode>;
 
 pub struct Parser<'a> {
     src: &'a [u8],
@@ -109,16 +115,25 @@ impl<'a> Parser<'a> {
         fns
     }
 
-    pub fn function(&mut self) -> DeclNode {
+    pub fn function(&mut self) -> TopDeclNode {
+        self.vars.clear();
+
         let offset = self.peek().offset;
         let ty = self.declspec();
         let (ty, name) = self.declarator(&ty);
 
-        self.vars.clear();
+        let params = self.vars.clone();
+
         let body = self.compound_stmt();
         // Reverse them to keep the locals layout in line with chibicc
-        let locals = self.vars.clone().into_iter().rev().collect();
-        DeclNode { kind: DeclKind::Function(name, locals, body, -1), offset, ty }
+        let locals: Vec<SP<VarData>> = self.vars.clone().into_iter().rev().collect();
+        TopDeclNode { kind: TopDeclKind::Function {
+            name,
+            params,
+            locals,
+            body,
+            stack_size: -1
+        }, offset, ty }
     }
 
     // stmt = "return" expr ";"
@@ -266,9 +281,21 @@ impl<'a> Parser<'a> {
     // type-suffix = ("(" func-params)?
     fn type_suffix(&mut self, ty: Ty) -> Ty {
         if self.peek_is("(") {
+            let mut params = Vec::new();
             self.advance();
+            while !self.peek_is(")") {
+                if params.len() > 0 {
+                    self.skip(",");
+                }
+                let base_ty = self.declspec();
+                let (ty, name) = self.declarator(&base_ty);
+                params.push(P::new(ty.clone()));
+                self.vars.push(
+                    Rc::new(RefCell::new(VarData { name, ty, stack_offset: -1 }))
+                );
+            }
             self.skip(")");
-            return Ty::Fn(P::new(ty));
+            return Ty::Fn(P::new(ty), params);
         }
         return ty;
     }
diff --git a/test.sh b/test.sh
index 6b50682..29b489c 100755
--- a/test.sh
+++ b/test.sh
@@ -112,6 +112,9 @@ assert 66 'int main() { return add6(1,2,add6(3,4,5,6,7,8),9,10,11); }'
 assert 136 'int main() { return add6(1,2,add6(3,add6(4,5,6,7,8,9),10,11,12,13),14,15,16); }'
 
 assert 32 'int main() { return ret32(); } int ret32() { return 32; }'
+assert 7 'int main() { return add2(3,4); } int add2(int x, int y) { return x+y; }'
+assert 1 'int main() { return sub2(4,3); } int sub2(int x, int y) { return x-y; }'
+assert 55 'int main() { return fib(9); } int fib(int x) { if (x<=1) return 1; return fib(x-1) + fib(x-2); }'
 
 rm -f tmp tmp2.o tmp.s
 
