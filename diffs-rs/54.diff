diff --git a/src/codegen.rs b/src/codegen.rs
index 63f05a5..088e426 100644
--- a/src/codegen.rs
+++ b/src/codegen.rs
@@ -22,12 +22,14 @@ pub fn preprocess_source_unit(su: &SourceUnit) {
                 for local in locals {
                     let mut local = local.borrow_mut();
                     let ty_size: i64 = local.ty.size.try_into().unwrap();
+                    let ty_align: i64 = local.ty.align.try_into().unwrap();
                     if let BindingKind::LocalVar { stack_offset } = &mut local.kind {
-                        offset -= ty_size;
-                        *stack_offset = offset;
+                        offset += ty_size;
+                        offset = align_to(offset, ty_align);
+                        *stack_offset = -offset;
                     }
                 }
-                *stack_size = align_to(-offset, 16);
+                *stack_size = align_to(offset, 16);
             }
             _ => {}
         }
diff --git a/src/parser.rs b/src/parser.rs
index e9dce67..3549537 100644
--- a/src/parser.rs
+++ b/src/parser.rs
@@ -35,9 +35,9 @@ pub struct Ty {
 impl Ty {
     fn int() -> Rc<Ty> { Rc::new(Ty { kind: TyKind::Int, size: 8, align: 8 }) }
     fn char() -> Rc<Ty> { Rc::new(Ty { kind: TyKind::Char, size: 1, align: 1 }) }
-    fn unit() -> Rc<Ty> { Rc::new(Ty { kind: TyKind::Unit, size: 0, align: 0 }) }
+    fn unit() -> Rc<Ty> { Rc::new(Ty { kind: TyKind::Unit, size: 0, align: 1 }) }
     fn ptr(base: Rc<Ty>) -> Rc<Ty> { Rc::new(Ty { kind: TyKind::Ptr(base), size: 8, align: 8 }) }
-    fn func(ret: Rc<Ty>, params: Vec<Rc<Ty>>) -> Rc<Ty> { Rc::new(Ty { kind: TyKind::Fn(ret, params), size: 0, align: 0 }) }
+    fn func(ret: Rc<Ty>, params: Vec<Rc<Ty>>) -> Rc<Ty> { Rc::new(Ty { kind: TyKind::Fn(ret, params), size: 0, align: 1 }) }
     fn array(base: Rc<Ty>, len: usize) -> Rc<Ty> {
         let base_size = base.size;
         let base_align = base.align;
@@ -45,7 +45,7 @@ impl Ty {
     }
     fn strct(members: Vec<Rc<Member>>) -> Rc<Ty> {
         let mut size = 0;
-        let mut align = 0;
+        let mut align = 1;
         for m in &members {
             size += m.ty.size;
             if align < m.ty.align {
diff --git a/test/variable.c b/test/variable.c
index 2c995fd..0e95391 100644
--- a/test/variable.c
+++ b/test/variable.c
@@ -47,6 +47,9 @@ int main() {
   ASSERT(2, ({ int x=2; { int x=3; } int y=4; x; }));
   ASSERT(3, ({ int x=2; { x=3; } x; }));
 
+  ASSERT(15, ({ int x; int y; char z; char *a=&y; char *b=&z; b-a; }));
+  ASSERT(1, ({ int x; char y; int z; char *a=&y; char *b=&z; b-a; }));
+
   printf("OK\n");
   return 0;
 }
