diff --git a/src/parser.rs b/src/parser.rs
index 512e6c4..ced7a64 100644
--- a/src/parser.rs
+++ b/src/parser.rs
@@ -301,7 +301,7 @@ impl<'a> Parser<'a> {
     }
 
     // type-suffix = "(" func-params
-    //             | "[" num "]"
+    //             | "[" num "]" type-suffix
     //             | Îµ
     fn type_suffix(&mut self, ty: Ty) -> Ty {
         if self.peek_is("(") {
@@ -312,6 +312,7 @@ impl<'a> Parser<'a> {
             self.advance();
             let len = self.get_number();
             self.skip("]");
+            let ty = self.type_suffix(ty);
             return Ty::array(P::new(ty), len.try_into().unwrap());
         }
         return ty;
@@ -487,10 +488,10 @@ impl<'a> Parser<'a> {
             (TyKind::Int, TyKind::Int) => {
                 ExprNode { kind: ExprKind::Add(lhs, rhs), offset, ty: Ty::int() }
             },
-            (TyKind::Ptr(_), TyKind::Int) | (TyKind::Array(_, _), TyKind::Int) => {
+            (TyKind::Ptr(bt), TyKind::Int) | (TyKind::Array(bt, _), TyKind::Int) => {
                 let rhs = P::new(ExprNode {
                     kind: ExprKind::Mul(
-                        P::new(ExprNode { kind: ExprKind::Num(8), offset, ty: Ty::int() }),
+                        synth_num(bt.size.try_into().unwrap(), offset),
                         rhs
                     ),
                     offset,
@@ -508,10 +509,10 @@ impl<'a> Parser<'a> {
             (TyKind::Int, TyKind::Int) => {
                 ExprNode { kind: ExprKind::Sub(lhs, rhs), offset, ty: Ty::int() }
             },
-            (TyKind::Ptr(_), TyKind::Int) | (TyKind::Array(_, _), TyKind::Int) => {
+            (TyKind::Ptr(bt), TyKind::Int) | (TyKind::Array(bt, _), TyKind::Int) => {
                 let rhs = P::new(ExprNode {
                     kind: ExprKind::Mul(
-                        synth_num(8, offset),
+                        synth_num(bt.size.try_into().unwrap(), offset),
                         rhs
                     ),
                     offset,
@@ -521,10 +522,11 @@ impl<'a> Parser<'a> {
                 ExprNode { kind: ExprKind::Sub(lhs, rhs), offset, ty }
             },
             // TODO better way than combinatorial explosion?
-            (TyKind::Ptr(_), TyKind::Ptr(_)) | (TyKind::Array(_, _), TyKind::Ptr(_)) |
-            (TyKind::Ptr(_), TyKind::Array(_, _)) | (TyKind::Array(_, _), TyKind::Array(_,_)) => {
+            (TyKind::Ptr(bt), TyKind::Ptr(_)) | (TyKind::Array(bt, _), TyKind::Ptr(_)) |
+            (TyKind::Ptr(bt), TyKind::Array(_, _)) | (TyKind::Array(bt, _), TyKind::Array(_,_)) => {
+                let size: i64 = bt.size.try_into().unwrap();
                 let node = P::new(ExprNode { kind: ExprKind::Sub(lhs, rhs), offset, ty: Ty::int() });
-                ExprNode { kind: ExprKind::Div(node, synth_num(8, offset)), offset, ty: Ty::int() }
+                ExprNode { kind: ExprKind::Div(node, synth_num(size, offset)), offset, ty: Ty::int() }
             }
             _ => self.error_at(offset, "invalid operands")
         }
diff --git a/test.sh b/test.sh
index c9d7459..9ecd2b2 100755
--- a/test.sh
+++ b/test.sh
@@ -122,6 +122,13 @@ assert 3 'int main() { int x[3]; *x=3; *(x+1)=4; *(x+2)=5; return *x; }'
 assert 4 'int main() { int x[3]; *x=3; *(x+1)=4; *(x+2)=5; return *(x+1); }'
 assert 5 'int main() { int x[3]; *x=3; *(x+1)=4; *(x+2)=5; return *(x+2); }'
 
+assert 0 'int main() { int x[2][3]; int *y=x; *y=0; return **x; }'
+assert 1 'int main() { int x[2][3]; int *y=x; *(y+1)=1; return *(*x+1); }'
+assert 2 'int main() { int x[2][3]; int *y=x; *(y+2)=2; return *(*x+2); }'
+assert 3 'int main() { int x[2][3]; int *y=x; *(y+3)=3; return **(x+1); }'
+assert 4 'int main() { int x[2][3]; int *y=x; *(y+4)=4; return *(*(x+1)+1); }'
+assert 5 'int main() { int x[2][3]; int *y=x; *(y+5)=5; return *(*(x+1)+2); }'
+
 rm -f tmp tmp2.o tmp.s
 
 echo OK
