diff --git a/src/codegen.rs b/src/codegen.rs
index 005f1c4..d6ec1f3 100644
--- a/src/codegen.rs
+++ b/src/codegen.rs
@@ -1,4 +1,4 @@
-use std::io::Write;
+use std::{io::Write, ops::{Add, Sub, Div, Mul}, fmt::Display};
 
 use crate::{parser::{Binding, BindingKind, Function, StmtNode, StmtKind, ExprNode, ExprKind, SourceUnit, TyKind, Ty}, context::{Context, ascii}};
 
@@ -416,6 +416,26 @@ impl<'a> Codegen<'a> {
     }
 }
 
-fn align_to(n: i64, align: i64) -> i64 {
-    ((n + align - 1) / align) * align
+pub trait Alignable : Display + Copy + Add<Output=Self> + Sub<Output=Self> + Div<Output=Self> + Mul<Output=Self> {
+    fn one() -> Self;
+    fn is_zero(self) -> bool;
+}
+
+impl Alignable for i64 {
+    fn one() -> Self { 1 }
+    fn is_zero(self) -> bool { return self == 0 }
+}
+
+impl Alignable for usize {
+    fn one() -> Self { 1 }
+    fn is_zero(self) -> bool { return self == 0 }
+}
+
+// Round up `n` to the nearest multiple of `align`. For instance,
+// align_to(5, 8) returns 8 and align_to(11, 8) returns 16.
+pub fn align_to<T: Alignable>(n: T, align: T) -> T {
+    if n.is_zero() {
+        return n;
+    }
+    ((n + align - Alignable::one()) / align) * align
 }
diff --git a/src/parser.rs b/src/parser.rs
index aad8af6..e9dce67 100644
--- a/src/parser.rs
+++ b/src/parser.rs
@@ -2,7 +2,7 @@ use std::cell::RefCell;
 
 use std::rc::Rc;
 
-use crate::{lexer::{Token, TokenKind, SourceLocation}, context::{AsciiStr, Context, ascii}};
+use crate::{lexer::{Token, TokenKind, SourceLocation}, context::{AsciiStr, Context, ascii}, codegen::align_to};
 
 pub type P<A> = Box<A>;
 pub type SP<A> = Rc<RefCell<A>>;
@@ -28,22 +28,32 @@ pub struct Member {
 #[derive(Debug)]
 pub struct Ty {
     pub kind: TyKind,
-    pub size: usize
+    pub size: usize,
+    pub align: usize,
 }
 
 impl Ty {
-    fn int() -> Rc<Ty> { Rc::new(Ty { kind: TyKind::Int, size: 8 }) }
-    fn char() -> Rc<Ty> { Rc::new(Ty { kind: TyKind::Char, size: 1 }) }
-    fn unit() -> Rc<Ty> { Rc::new(Ty { kind: TyKind::Unit, size: 0 }) }
-    fn ptr(base: Rc<Ty>) -> Rc<Ty> { Rc::new(Ty { kind: TyKind::Ptr(base), size: 8 }) }
-    fn func(ret: Rc<Ty>, params: Vec<Rc<Ty>>) -> Rc<Ty> { Rc::new(Ty { kind: TyKind::Fn(ret, params), size: 0 }) }
+    fn int() -> Rc<Ty> { Rc::new(Ty { kind: TyKind::Int, size: 8, align: 8 }) }
+    fn char() -> Rc<Ty> { Rc::new(Ty { kind: TyKind::Char, size: 1, align: 1 }) }
+    fn unit() -> Rc<Ty> { Rc::new(Ty { kind: TyKind::Unit, size: 0, align: 0 }) }
+    fn ptr(base: Rc<Ty>) -> Rc<Ty> { Rc::new(Ty { kind: TyKind::Ptr(base), size: 8, align: 8 }) }
+    fn func(ret: Rc<Ty>, params: Vec<Rc<Ty>>) -> Rc<Ty> { Rc::new(Ty { kind: TyKind::Fn(ret, params), size: 0, align: 0 }) }
     fn array(base: Rc<Ty>, len: usize) -> Rc<Ty> {
         let base_size = base.size;
-        Rc::new(Ty { kind: TyKind::Array(base, len), size: base_size*len })
+        let base_align = base.align;
+        Rc::new(Ty { kind: TyKind::Array(base, len), size: base_size*len, align: base_align })
     }
     fn strct(members: Vec<Rc<Member>>) -> Rc<Ty> {
-        let size = members.iter().map(|m| m.ty.size).sum();
-        Rc::new(Ty { kind: TyKind::Struct(members), size })
+        let mut size = 0;
+        let mut align = 0;
+        for m in &members {
+            size += m.ty.size;
+            if align < m.ty.align {
+                align = m.ty.align;
+            }
+        }
+        size = align_to(size, align);
+        Rc::new(Ty { kind: TyKind::Struct(members), size, align })
     }
 
     fn is_integer_like(&self) -> bool {
@@ -470,7 +480,7 @@ impl<'a> Parser<'a> {
 
     fn struct_decl(&mut self) -> Rc<Ty> {
         let mut members = Vec::new();
-        let mut offset = 0;
+        let mut offset: usize = 0;
 
         self.skip("{");
         while !self.peek_is("}") {
@@ -484,6 +494,7 @@ impl<'a> Parser<'a> {
 
                 let (ty, name) = self.declarator(base_ty.clone());
                 let size = ty.size;
+                offset = align_to(offset, ty.align);
                 members.push(Rc::new(Member {
                     name,
                     ty,
diff --git a/test/struct.c b/test/struct.c
index b0b198f..2877951 100644
--- a/test/struct.c
+++ b/test/struct.c
@@ -24,8 +24,9 @@ int main() {
   ASSERT(32, ({ struct {int a;} x[4]; sizeof(x); }));
   ASSERT(48, ({ struct {int a[3];} x[2]; sizeof(x); }));
   ASSERT(2, ({ struct {char a; char b;} x; sizeof(x); }));
-  ASSERT(9, ({ struct {char a; int b;} x; sizeof(x); }));
   ASSERT(0, ({ struct {} x; sizeof(x); }));
+  ASSERT(16, ({ struct {char a; int b;} x; sizeof(x); }));
+  ASSERT(16, ({ struct {int a; char b;} x; sizeof(x); }));
 
   printf("OK\n");
   return 0;
