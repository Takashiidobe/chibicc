diff --git a/src/parser.rs b/src/parser.rs
index 370cffd..4195023 100644
--- a/src/parser.rs
+++ b/src/parser.rs
@@ -487,38 +487,69 @@ impl<'a> Parser<'a> {
         }
     }
 
-    // declspec = "int" | "char" | "struct" struct-decl
+    // declspec = struct-decl | union-decl | "void" | "char" | ("short" | "int" | "long")+
+    //
+    // The order of typenames in a type-specifier doesn't matter. For
+    // example, `int long static` means the same as `static long int`.
+    // That can also be written as `static long` because you can omit
+    // `int` if `long` or `short` are specified. However, something like
+    // `char int` is not a valid type specifier. We have to accept only a
+    // limited combinations of the typenames.
+    //
+    // In this function, we count the number of occurrences of each typename
+    // while keeping the "current" type object that the typenames up
+    // until that point represent. When we reach a non-typename token,
+    // we returns the current type object.
     fn declspec(&mut self) -> Rc<Ty> {
+        if self.peek_is("struct") || self.peek_is("union") {
+            return self.struct_union_decl();
+        }
         if self.peek_is("void") {
             self.advance();
             return Ty::unit();
         }
-
         if self.peek_is("char") {
             self.advance();
             return Ty::char();
         }
 
-        if self.peek_is("short") {
-            self.advance();
-            return Ty::short();
+        #[derive(PartialOrd, Ord, PartialEq, Eq)]
+        enum DeclTy {
+            Short, Int, Long
         }
+        use DeclTy::*;
 
-        if self.peek_is("int") {
-            self.advance();
-            return Ty::int();
-        }
+        let mut decl_tys: Vec<DeclTy> = Vec::new();
+        let loc = self.peek().loc;
 
-        if self.peek_is("long") {
+        while self.peek_is_ty_name() {
+            if self.peek_is("short") {
+                decl_tys.push(Short);
+            }
+            else if self.peek_is("int") {
+                decl_tys.push(Int);
+            }
+            else if self.peek_is("long") {
+                decl_tys.push(Long);
+            }
+            else {
+                self.ctx.error_tok(self.peek(), "invalid type");
+            }
             self.advance();
-            return Ty::long();
         }
 
-        if self.peek_is("struct") || self.peek_is("union") {
-            return self.struct_union_decl();
+        decl_tys.sort();
+        if decl_tys == [Short] || decl_tys == [Short, Int] {
+            return Ty::short();
+        }
+        else if decl_tys == [Int] {
+            return Ty::int();
+        }
+        else if decl_tys == [Long] || decl_tys == [Int, Long] {
+            return Ty::long();
         }
 
-        self.ctx.error_tok(self.peek(), "typename expected");
+        self.ctx.error_at(&loc, "invalid type");
     }
 
     // declarator = "*"* ("(" ident ")" | "(" declarator ")" | ident) type-suffix
diff --git a/test/decl.c b/test/decl.c
new file mode 100644
index 0000000..14dc267
--- /dev/null
+++ b/test/decl.c
@@ -0,0 +1,13 @@
+#include "test.h"
+
+int main() {
+  ASSERT(1, ({ char x; sizeof(x); }));
+  ASSERT(2, ({ short int x; sizeof(x); }));
+  ASSERT(2, ({ int short x; sizeof(x); }));
+  ASSERT(4, ({ int x; sizeof(x); }));
+  ASSERT(8, ({ long int x; sizeof(x); }));
+  ASSERT(8, ({ int long x; sizeof(x); }));
+
+  printf("OK\n");
+  return 0;
+}
