diff --git a/src/codegen.rs b/src/codegen.rs
index de5baa2..76f69d3 100644
--- a/src/codegen.rs
+++ b/src/codegen.rs
@@ -5,6 +5,9 @@ use crate::{parser::{BindingKind, Function, StmtNode, StmtKind, ExprNode, ExprKi
 const ARG_REGS8: [&str;6] = [
     "%dil", "%sil", "%dl", "%cl", "%r8b", "%r9b"
 ];
+const ARG_REGS32: [&str;6] = [
+    "%edi", "%esi", "%edx", "%ecx", "%r8d", "%r9d"
+];
 const ARG_REGS64: [&str;6] = [
     "%rdi", "%rsi", "%rdx", "%rcx", "%r8", "%r9"
 ];
@@ -140,12 +143,7 @@ impl<'a> Codegen<'a> {
                 for (i, param) in params.iter().enumerate() {
                     let param = param.borrow();
                     if let BindingKind::LocalVar { stack_offset } = param.kind {
-                        if param.ty.size == 1 {
-                            wln!(self, "  mov {}, {}(%rbp)", ARG_REGS8[i], stack_offset);
-                        }
-                        else {
-                            wln!(self, "  mov {}, {}(%rbp)", ARG_REGS64[i], stack_offset);
-                        }
+                        self.store_gp(i, stack_offset, param.ty.size)
                     }
                 }
 
@@ -162,6 +160,15 @@ impl<'a> Codegen<'a> {
         }
     }
 
+    fn store_gp(&mut self, reg_idx: usize, stack_offset: i64, size: usize) {
+        match size {
+            1 => wln!(self, " mov {}, {}(%rbp)", ARG_REGS8[reg_idx], stack_offset),
+            4 => wln!(self, " mov {}, {}(%rbp)", ARG_REGS32[reg_idx], stack_offset),
+            8 => wln!(self, " mov {}, {}(%rbp)", ARG_REGS64[reg_idx], stack_offset),
+            _ => panic!("invalid size")
+        }
+    }
+
     fn stmt(&mut self, node: &StmtNode) {
         wln!(self, "  .loc 1 {} {}", node.loc.line, node.loc.column);
         match node.kind {
@@ -346,6 +353,9 @@ impl<'a> Codegen<'a> {
         if ty.size == 1 {
             wln!(self, "  movsbq (%rax), %rax");
         }
+        else if ty.size == 4 {
+            wln!(self, "  movsxd (%rax), %rax");
+        }
         else {
             wln!(self, "  mov (%rax), %rax");
         }
@@ -368,6 +378,9 @@ impl<'a> Codegen<'a> {
         if ty.size == 1 {
             wln!(self, "  mov %al, (%rdi)");
         }
+        else if ty.size == 4 {
+            wln!(self, "  mov %eax, (%rdi)");
+        }
         else {
             wln!(self, "  mov %rax, (%rdi)");
         }
diff --git a/src/parser.rs b/src/parser.rs
index 8cc26bd..f50cba7 100644
--- a/src/parser.rs
+++ b/src/parser.rs
@@ -34,7 +34,7 @@ pub struct Ty {
 }
 
 impl Ty {
-    fn int() -> Rc<Ty> { Rc::new(Ty { kind: TyKind::Int, size: 8, align: 8 }) }
+    fn int() -> Rc<Ty> { Rc::new(Ty { kind: TyKind::Int, size: 4, align: 4 }) }
     fn char() -> Rc<Ty> { Rc::new(Ty { kind: TyKind::Char, size: 1, align: 1 }) }
     fn unit() -> Rc<Ty> { Rc::new(Ty { kind: TyKind::Unit, size: 0, align: 1 }) }
     fn ptr(base: Rc<Ty>) -> Rc<Ty> { Rc::new(Ty { kind: TyKind::Ptr(base), size: 8, align: 8 }) }
diff --git a/test/struct.c b/test/struct.c
index b02d87a..8975f43 100644
--- a/test/struct.c
+++ b/test/struct.c
@@ -17,19 +17,19 @@ int main() {
 
   ASSERT(6, ({ struct { struct { char b; } a; } x; x.a.b=6; x.a.b; }));
 
-  ASSERT(8, ({ struct {int a;} x; sizeof(x); }));
-  ASSERT(16, ({ struct {int a; int b;} x; sizeof(x); }));
-  ASSERT(16, ({ struct {int a, b;} x; sizeof(x); }));
-  ASSERT(24, ({ struct {int a[3];} x; sizeof(x); }));
-  ASSERT(32, ({ struct {int a;} x[4]; sizeof(x); }));
-  ASSERT(48, ({ struct {int a[3];} x[2]; sizeof(x); }));
+  ASSERT(4, ({ struct {int a;} x; sizeof(x); }));
+  ASSERT(8, ({ struct {int a; int b;} x; sizeof(x); }));
+  ASSERT(8, ({ struct {int a, b;} x; sizeof(x); }));
+  ASSERT(12, ({ struct {int a[3];} x; sizeof(x); }));
+  ASSERT(16, ({ struct {int a;} x[4]; sizeof(x); }));
+  ASSERT(24, ({ struct {int a[3];} x[2]; sizeof(x); }));
   ASSERT(2, ({ struct {char a; char b;} x; sizeof(x); }));
   ASSERT(0, ({ struct {} x; sizeof(x); }));
-  ASSERT(24, ({ struct {char a; int b; char c;} x; sizeof(x); }));
-  ASSERT(16, ({ struct {int a; char b; char c;} x; sizeof(x); }));
+  ASSERT(8, ({ struct {char a; int b;} x; sizeof(x); }));
+  ASSERT(8, ({ struct {int a; char b;} x; sizeof(x); }));
 
-  ASSERT(16, ({ struct t {int a; int b;} x; struct t y; sizeof(y); }));
-  ASSERT(16, ({ struct t {int a; int b;}; struct t y; sizeof(y); }));
+  ASSERT(8, ({ struct t {int a; int b;} x; struct t y; sizeof(y); }));
+  ASSERT(8, ({ struct t {int a; int b;}; struct t y; sizeof(y); }));
   ASSERT(2, ({ struct t {char a[2];}; { struct t {char a[4];}; } struct t y; sizeof(y); }));
   ASSERT(3, ({ struct t {int x;}; int t=1; struct t y; y.x=2; t+y.x; }));
 
@@ -46,6 +46,9 @@ int main() {
   ASSERT(7, ({ struct t {int a,b;}; struct t x; x.a=7; struct t y, *p=&x, *q=&y; *q=*p; y.a; }));
   ASSERT(5, ({ struct t {char a, b;} x, y; x.a=5; y=x; y.a; }));
 
+  ASSERT(8, ({ struct t {int a; int b;} x; struct t y; sizeof(y); }));
+  ASSERT(8, ({ struct t {int a; int b;}; struct t y; sizeof(y); }));
+
   printf("OK\n");
   return 0;
 }
diff --git a/test/union.c b/test/union.c
index c25a621..e4cbca4 100644
--- a/test/union.c
+++ b/test/union.c
@@ -1,7 +1,7 @@
 #include "test.h"
 
 int main() {
-  ASSERT(8, ({ union { int a; char b[6]; } x; sizeof(x); }));
+  ASSERT(6, ({ union { int a; char b[6]; } x; sizeof(x); }));
   ASSERT(3, ({ union { int a; char b[4]; } x; x.a = 515; x.b[0]; }));
   ASSERT(2, ({ union { int a; char b[4]; } x; x.a = 515; x.b[1]; }));
   ASSERT(0, ({ union { int a; char b[4]; } x; x.a = 515; x.b[2]; }));
diff --git a/test/variable.c b/test/variable.c
index 0e95391..ee8e4ee 100644
--- a/test/variable.c
+++ b/test/variable.c
@@ -13,17 +13,17 @@ int main() {
   ASSERT(3, ({ int foo=3; foo; }));
   ASSERT(8, ({ int foo123=3; int bar=5; foo123+bar; }));
 
-  ASSERT(8, ({ int x; sizeof(x); }));
-  ASSERT(8, ({ int x; sizeof x; }));
+  ASSERT(4, ({ int x; sizeof(x); }));
+  ASSERT(4, ({ int x; sizeof x; }));
   ASSERT(8, ({ int *x; sizeof(x); }));
-  ASSERT(32, ({ int x[4]; sizeof(x); }));
-  ASSERT(96, ({ int x[3][4]; sizeof(x); }));
-  ASSERT(32, ({ int x[3][4]; sizeof(*x); }));
-  ASSERT(8, ({ int x[3][4]; sizeof(**x); }));
-  ASSERT(9, ({ int x[3][4]; sizeof(**x) + 1; }));
-  ASSERT(9, ({ int x[3][4]; sizeof **x + 1; }));
-  ASSERT(8, ({ int x[3][4]; sizeof(**x + 1); }));
-  ASSERT(8, ({ int x=1; sizeof(x=2); }));
+  ASSERT(16, ({ int x[4]; sizeof(x); }));
+  ASSERT(48, ({ int x[3][4]; sizeof(x); }));
+  ASSERT(16, ({ int x[3][4]; sizeof(*x); }));
+  ASSERT(4, ({ int x[3][4]; sizeof(**x); }));
+  ASSERT(5, ({ int x[3][4]; sizeof(**x) + 1; }));
+  ASSERT(5, ({ int x[3][4]; sizeof **x + 1; }));
+  ASSERT(4, ({ int x[3][4]; sizeof(**x + 1); }));
+  ASSERT(4, ({ int x=1; sizeof(x=2); }));
   ASSERT(1, ({ int x=1; sizeof(x=2); x; }));
 
   ASSERT(0, g1);
@@ -33,8 +33,8 @@ int main() {
   ASSERT(2, ({ g2[0]=0; g2[1]=1; g2[2]=2; g2[3]=3; g2[2]; }));
   ASSERT(3, ({ g2[0]=0; g2[1]=1; g2[2]=2; g2[3]=3; g2[3]; }));
 
-  ASSERT(8, sizeof(g1));
-  ASSERT(32, sizeof(g2));
+  ASSERT(4, sizeof(g1));
+  ASSERT(16, sizeof(g2));
 
   ASSERT(1, ({ char x=1; x; }));
   ASSERT(1, ({ char x=1; char y=2; x; }));
@@ -47,7 +47,7 @@ int main() {
   ASSERT(2, ({ int x=2; { int x=3; } int y=4; x; }));
   ASSERT(3, ({ int x=2; { x=3; } x; }));
 
-  ASSERT(15, ({ int x; int y; char z; char *a=&y; char *b=&z; b-a; }));
+  ASSERT(7, ({ int x; int y; char z; char *a=&y; char *b=&z; b-a; }));
   ASSERT(1, ({ int x; char y; int z; char *a=&y; char *b=&z; b-a; }));
 
   printf("OK\n");
