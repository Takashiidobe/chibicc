diff --git a/src/codegen.rs b/src/codegen.rs
index 5f82593..aece48f 100644
--- a/src/codegen.rs
+++ b/src/codegen.rs
@@ -103,7 +103,9 @@ impl<'a> Codegen<'a> {
             },
             StmtKind::For(ref init, ref cond, ref inc, ref body) => {
                 let id = self.next_id();
-                self.stmt(init);
+                if let Some(init) = init {
+                    self.stmt(init);
+                }
                 println!(".L.begin.{}:", id);
                 if let Some(cond) = cond {
                     self.expr(cond);
diff --git a/src/lexer.rs b/src/lexer.rs
index 0e98818..e35b500 100644
--- a/src/lexer.rs
+++ b/src/lexer.rs
@@ -16,10 +16,10 @@ pub struct Token {
     pub kind: TokenKind
 }
 
-const KEYWORDS: [&[u8];4] = [
+const KEYWORDS: [&[u8];5] = [
     "return".as_bytes(),
     "if".as_bytes(), "else".as_bytes(),
-    "for".as_bytes()
+    "for".as_bytes(), "while".as_bytes()
 ];
 
 pub struct Lexer<'a> {
diff --git a/src/parser.rs b/src/parser.rs
index 2dc6f08..6ecdb07 100644
--- a/src/parser.rs
+++ b/src/parser.rs
@@ -36,7 +36,7 @@ pub enum StmtKind {
     Return(ExprNode),
     Block(Vec<StmtNode>),
     If(P<ExprNode>, P<StmtNode>, Option<P<StmtNode>>),
-    For(P<StmtNode>, Option<P<ExprNode>>, Option<P<ExprNode>>, P<StmtNode>)
+    For(Option<P<StmtNode>>, Option<P<ExprNode>>, Option<P<ExprNode>>, P<StmtNode>)
 }
 
 #[derive(Debug)]
@@ -84,6 +84,7 @@ impl<'a> Parser<'a> {
     // stmt = "return" expr ";"
     //      | "if" "(" expr ")" stmt ("else" stmt)?
     //      | "for" "( expr-stmt ";" expr? ";" expr? ")" stmt
+    //      | "while" "(" expr ")" stmt
     //      | "{" compound-stmt
     //      | expr-stmt
     fn stmt(&mut self) -> StmtNode {
@@ -111,7 +112,7 @@ impl<'a> Parser<'a> {
         if self.tok_is("for") {
             self.advance();
             self.skip("(");
-            let init = P::new(self.expr_stmt());
+            let init = Some(P::new(self.expr_stmt()));
 
             let mut cond = None;
             if !self.tok_is(";") {
@@ -130,6 +131,15 @@ impl<'a> Parser<'a> {
             return StmtNode { kind: StmtKind::For(init, cond, inc, body) }
         }
 
+        if self.tok_is("while") {
+            self.advance();
+            self.skip("(");
+            let cond = Some(P::new(self.expr()));
+            self.skip(")");
+            let body = P::new(self.stmt());
+            return StmtNode { kind: StmtKind::For(None, cond, None, body)}
+        }
+
         if self.tok_is("{") {
             self.advance();
             return self.compound_stmt()
diff --git a/test.sh b/test.sh
index 6ca05d6..6f9b6e9 100755
--- a/test.sh
+++ b/test.sh
@@ -76,6 +76,8 @@ assert 3 '{ if (1) { 1; 2; return 3; } else { return 4; } }'
 assert 55 '{ i=0; j=0; for (i=0; i<=10; i=i+1) j=i+j; return j; }'
 assert 3 '{ for (;;) {return 3;} return 5; }'
 
+assert 10 '{ i=0; while(i<10) { i=i+1; } return i; }'
+
 rm -f tmp tmp.s
 
 echo OK
