diff --git a/src/codegen.rs b/src/codegen.rs
index 7fcacc5..5f82593 100644
--- a/src/codegen.rs
+++ b/src/codegen.rs
@@ -100,7 +100,23 @@ impl<'a> Codegen<'a> {
                     self.stmt(else_stmt);
                 }
                 println!(".L.end.{}:", id);
-            }
+            },
+            StmtKind::For(ref init, ref cond, ref inc, ref body) => {
+                let id = self.next_id();
+                self.stmt(init);
+                println!(".L.begin.{}:", id);
+                if let Some(cond) = cond {
+                    self.expr(cond);
+                    println!("  cmp $0, %rax");
+                    println!("  je .L.end.{}", id);
+                }
+                self.stmt(body);
+                if let Some(inc) = inc {
+                    self.expr(inc);
+                }
+                println!("  jmp .L.begin.{}", id);
+                println!(".L.end.{}:", id);
+            },
         }
     }
 
diff --git a/src/lexer.rs b/src/lexer.rs
index 794747e..0e98818 100644
--- a/src/lexer.rs
+++ b/src/lexer.rs
@@ -16,9 +16,10 @@ pub struct Token {
     pub kind: TokenKind
 }
 
-const KEYWORDS: [&[u8];3] = [
+const KEYWORDS: [&[u8];4] = [
     "return".as_bytes(),
-    "if".as_bytes(), "else".as_bytes()
+    "if".as_bytes(), "else".as_bytes(),
+    "for".as_bytes()
 ];
 
 pub struct Lexer<'a> {
diff --git a/src/parser.rs b/src/parser.rs
index bc6fd5f..2dc6f08 100644
--- a/src/parser.rs
+++ b/src/parser.rs
@@ -36,6 +36,7 @@ pub enum StmtKind {
     Return(ExprNode),
     Block(Vec<StmtNode>),
     If(P<ExprNode>, P<StmtNode>, Option<P<StmtNode>>),
+    For(P<StmtNode>, Option<P<ExprNode>>, Option<P<ExprNode>>, P<StmtNode>)
 }
 
 #[derive(Debug)]
@@ -82,6 +83,7 @@ impl<'a> Parser<'a> {
 
     // stmt = "return" expr ";"
     //      | "if" "(" expr ")" stmt ("else" stmt)?
+    //      | "for" "( expr-stmt ";" expr? ";" expr? ")" stmt
     //      | "{" compound-stmt
     //      | expr-stmt
     fn stmt(&mut self) -> StmtNode {
@@ -106,6 +108,28 @@ impl<'a> Parser<'a> {
             return StmtNode { kind: StmtKind::If(cond, then_stmt, else_stmt) }
         }
 
+        if self.tok_is("for") {
+            self.advance();
+            self.skip("(");
+            let init = P::new(self.expr_stmt());
+
+            let mut cond = None;
+            if !self.tok_is(";") {
+                cond = Some(P::new(self.expr()));
+            }
+            self.skip(";");
+
+            let mut inc = None;
+            if !self.tok_is(")") {
+                inc = Some(P::new(self.expr()));
+            }
+            self.skip(")");
+
+            let body = P::new(self.stmt());
+
+            return StmtNode { kind: StmtKind::For(init, cond, inc, body) }
+        }
+
         if self.tok_is("{") {
             self.advance();
             return self.compound_stmt()
diff --git a/test.sh b/test.sh
index 8fd937e..6ca05d6 100755
--- a/test.sh
+++ b/test.sh
@@ -73,6 +73,9 @@ assert 2 '{ if (2-1) return 2; return 3; }'
 assert 4 '{ if (0) { 1; 2; return 3; } else { return 4; } }'
 assert 3 '{ if (1) { 1; 2; return 3; } else { return 4; } }'
 
+assert 55 '{ i=0; j=0; for (i=0; i<=10; i=i+1) j=i+j; return j; }'
+assert 3 '{ for (;;) {return 3;} return 5; }'
+
 rm -f tmp tmp.s
 
 echo OK
